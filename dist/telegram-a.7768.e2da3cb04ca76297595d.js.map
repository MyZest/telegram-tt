{"version":3,"file":"telegram-a.7768.e2da3cb04ca76297595d.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/stars.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/bots.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/helpers/meta.ts","webpack://telegram-t/./src/global/actions/ui/stars.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/ui/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.module.scss?0f2f","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.module.scss?13d1","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/panes/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.module.scss?7a09","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/panes/BotAdPane.module.scss?ff1a","webpack://telegram-t/./src/components/middle/panes/BotAdPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.module.scss?a09a","webpack://telegram-t/./src/components/middle/panes/ChatReportPane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.module.scss?d2aa","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.async.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/gift/SavedGift.module.scss?4193","webpack://telegram-t/./src/components/common/gift/SavedGift.tsx","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePeerFullInfo,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\nconst VIDEO_PROCESSING_NOTIFICATION_DELAY = 1000;\nlet lastVideoProcessingNotificationTime = 0;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (message.reportDeliveryUntilDate && message.reportDeliveryUntilDate > getServerTime()) {\n        actions.reportMessageDelivery({ chatId, messageId: id });\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message)?.text !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateVideoProcessingPending': {\n      const {\n        chatId, localId, newScheduledMessageId,\n      } = update;\n\n      global = deleteChatMessages(global, chatId, [localId]);\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const currentMessageList = selectCurrentMessageList(global, tabId);\n        if (currentMessageList?.chatId !== chatId) return;\n\n        const now = Date.now();\n        if (now - lastVideoProcessingNotificationTime < VIDEO_PROCESSING_NOTIFICATION_DELAY) {\n          return;\n        }\n        lastVideoProcessingNotificationTime = now;\n\n        actions.showNotification({\n          message: {\n            key: 'VideoConversionText',\n          },\n          title: {\n            key: 'VideoConversionTitle',\n          },\n          tabId,\n        });\n\n        actions.focusMessage({\n          chatId,\n          messageId: newScheduledMessageId,\n          messageListType: 'scheduled',\n          tabId,\n        });\n      });\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      const chat = selectChat(global, chatId);\n      // Reload dialogs if chat is not present in the list\n      if (!chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: Number(threadId) });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, newIds, chatId } = update;\n\n      const hadVideoProcessing = ids?.some((id) => (\n        selectScheduledMessage(global, chatId, id)?.isVideoProcessingPending\n      ));\n      const processedVideoId = newIds?.find((id) => {\n        const message = selectChatMessage(global, chatId, id);\n        return message?.content.video;\n      });\n\n      if (hadVideoProcessing && processedVideoId) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showNotification({\n            message: {\n              key: 'VideoConversionDone',\n            },\n            actionText: {\n              key: 'VideoConversionView',\n            },\n            action: {\n              action: 'focusMessage',\n              payload: {\n                chatId,\n                messageId: processedVideoId,\n                tabId,\n              },\n            },\n            tabId,\n          });\n        });\n      }\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'deleteParticipantHistory': {\n      const { chatId, peerId } = update;\n\n      global = getGlobal();\n      deleteParticipantHistory(global, chatId, peerId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    const { localIsPrivate: isPrivate, localAmount, localPeerId } = localPaidReaction;\n    reactions.results = addPaidReaction(reactions.results, localAmount, isPrivate, localPeerId);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteParticipantHistory<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  peerId: string,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n\n  const messageIds = Object.values(byId).filter((message) => {\n    return message.senderId === peerId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      // Prevent local deletion of sent messages in case of desync\n      const stillDeletedIds = ids.filter((id) => selectChatMessage(global, chatId, id)?.isDeleting);\n      global = deleteChatMessages(global, chatId, stillDeletedIds);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiChatType,\n  ApiDraft,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection, type ThreadId, type WebPageMediaSize } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { ensureProtocol, isMixedScriptUrl } from '../../../util/browser/url';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n  splitMessagesForForwarding,\n} from '../../helpers';\nimport { isApiPeerUser } from '../../helpers/peers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updatePeerFullInfo,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanForwardMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId!,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n\n  const params = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n          sendMessage(global, {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n\n          restAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          firstAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n\n          sendMessage(global, {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n        }\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, isUnpin, isOneSide, isSilent,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteParticipantHistory', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, peerId,\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n  const peer = selectPeer(global, peerId)!;\n\n  void callApi('deleteParticipantHistory', { chat, peer });\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  const forwardableRealMessages = realMessages.filter((message) => selectCanForwardMessage(global, message));\n  if (forwardableRealMessages.length) {\n    const messageBatches = global.config?.maxForwardedCount\n      ? splitMessagesForForwarding(forwardableRealMessages, global.config.maxForwardedCount)\n      : [forwardableRealMessages];\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      messageBatches.forEach((batch) => {\n        callApi('forwardMessages', {\n          fromChat,\n          toChat,\n          toThreadId,\n          messages: batch,\n          isSilent,\n          scheduledAt,\n          sendAs,\n          withMyScore,\n          noAuthors,\n          noCaptions,\n          isCurrentUserPremium,\n          wasDrafted: Boolean(draft),\n          lastMessageId,\n        });\n      });\n    })();\n  }\n\n  serviceMessages\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker } = message.content;\n\n      const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyInfo,\n        text,\n        entities,\n        sticker,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        lastMessageId,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (!ids.length) {\n    global = updatePeerFullInfo(global, chat.id, { hasScheduledMessages: false });\n  }\n\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyInfo?: ApiInputReplyInfo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  groupedId?: string;\n  wasDrafted?: boolean;\n  lastMessageId?: number;\n  isInvertedMedia?: true;\n  effectId?: string;\n  webPageMediaSize?: WebPageMediaSize;\n}) {\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSendPaidReactionsAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat, isForPaidReactions: true });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendPaidReactionsAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendPaidReactionsAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (isApiPeerUser(peer) && selectIsChatBotNotStarted(global, peer.id)) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, peerId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const message = selectSponsoredMessage(global, peerId);\n  if (!peer || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { peer, random: message.randomId });\n});\n\naddActionHandler('clickSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { peerId, isMedia, isFullscreen } = payload;\n  const peer = selectPeer(global, peerId);\n  const message = selectSponsoredMessage(global, peerId);\n  if (!peer || !message) {\n    return;\n  }\n\n  void callApi('clickSponsoredMessage', {\n    peer, random: message.randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsoredMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('reportSponsoredMessage', { peer, randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    global = deleteSponsoredMessage(global, peerId);\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId: peerId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chat.id, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n  const parsedUrl = new URL(urlWithProtocol);\n  const isMixedScript = isMixedScriptUrl(urlWithProtocol);\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: isMixedScript ? parsedUrl.toString() : urlWithProtocol, tabId });\n  } else {\n    window.open(parsedUrl, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    quoteText: replyingInfo.quoteText,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nconst MESSAGES_TO_REPORT_DELIVERY = new Map<string, number[]>();\nlet reportDeliveryTimeout: number | undefined;\naddActionHandler('reportMessageDelivery', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const currentIds = MESSAGES_TO_REPORT_DELIVERY.get(chatId) || [];\n  currentIds.push(messageId);\n  MESSAGES_TO_REPORT_DELIVERY.set(chatId, currentIds);\n\n  if (!reportDeliveryTimeout) {\n    // Slightly unsafe in the multitab environment, but there is no better way to do it now.\n    // Not critical if user manages to close the tab in a show window before the report is sent.\n    reportDeliveryTimeout = window.setTimeout(() => {\n      reportDeliveryTimeout = undefined;\n\n      MESSAGES_TO_REPORT_DELIVERY.forEach((messageIds, cId) => {\n        const chat = selectChat(global, cId);\n        if (!chat) return;\n\n        callApi('reportMessagesDelivery', { chat, messageIds });\n      });\n      MESSAGES_TO_REPORT_DELIVERY.clear();\n    }, 500);\n  }\n});\n\naddActionHandler('openPreparedInlineMessageModal', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, messageId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const result = await callApi('fetchPreparedInlineMessage', {\n    bot,\n    id: messageId,\n  });\n  if (!result) {\n    actions.sendWebAppEvent({\n      webAppKey,\n      event: {\n        eventType: 'prepared_message_failed',\n        eventData: { error: 'MESSAGE_EXPIRED' },\n      },\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    preparedMessageModal: {\n      message: result,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    webAppKey, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const supportedFilters = message.peerTypes?.filter((type): type is ApiChatType => type !== 'self');\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      webAppKey,\n      filter: supportedFilters,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserCollectibleStatuses', async (global, actions): Promise<void> => {\n  setGlobal(global);\n\n  const { hash } = global.collectibleEmojiStatuses || {};\n\n  const result = await callApi('fetchCollectibleEmojiStatuses', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    collectibleEmojiStatuses: {\n      hash: result.hash,\n      statuses: result.statuses,\n    },\n  };\n  setGlobal(global);\n  const documentIds = result.statuses.map(({ documentId }) => documentId);\n\n  actions.loadCustomEmojis({ ids: documentIds });\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error: unknown) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, shouldIgnoreCache, tabId = getCurrentTabId() } = payload;\n  if (shouldIgnoreCache || !selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiMessageSearchContext, ApiPeer, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = result;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const {\n    type, context, shouldResetResultsByType, shouldCheckFetchingMessagesStatus, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (shouldCheckFetchingMessagesStatus) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: true }, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = (!shouldResetResultsByType && resultsByType?.[type]) || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    context,\n    shouldResetResultsByType,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  context?: ApiMessageSearchContext;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n  shouldResetResultsByType?: boolean;\n}) {\n  const {\n    query = '', type, context, offsetRate, offsetId, offsetPeer,\n    peer, maxDate, minDate, shouldResetResultsByType, tabId = getCurrentTabId(),\n  } = params;\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      context,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (shouldResetResultsByType) {\n    global = updateGlobalSearch(global, {\n      resultsByType: {\n        ...(selectTabState(global, tabId).globalSearch || {}).resultsByType,\n        [type]: undefined,\n      },\n    }, tabId);\n  }\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n  const offsetRate = results?.nextOffsetRate;\n  const offsetPeerId = results?.nextOffsetPeerId;\n  const offsetPeer = offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchHashtagPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n) : number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction : LoadMoreDirection,\n  limit : number, newFoundIdsCount : number,\n  currentSegment?: ChatMediaSearchSegment,\n) : LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPane', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPane', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { Thread, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      loadAllChats({ listType: 'saved' });\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_VERIFICATION_PEERS_LIMIT } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', async (global, actions, payload): Promise<void> => {\n  const {\n    emojiStatus, referrerWebAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    if (referrerWebAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n        tabId,\n      });\n    }\n\n    actions.openPremiumModal({ initialSection: 'emoji_status', tabId });\n    return;\n  }\n\n  const result = await callApi('updateEmojiStatus', emojiStatus);\n\n  if (referrerWebAppKey) {\n    if (!result) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SERVER_ERROR',\n          },\n        },\n        tabId,\n      });\n      return;\n    }\n\n    actions.sendWebAppEvent({\n      webAppKey: referrerWebAppKey,\n      event: {\n        eventType: 'emoji_status_set',\n      },\n      tabId,\n    });\n    actions.showNotification({\n      message: {\n        key: 'BotSuggestedStatusUpdated',\n      },\n      customEmojiIconId: emojiStatus.documentId,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openSuggestedStatusModal', async (global, actions, payload): Promise<void> => {\n  const {\n    customEmojiId, duration, botId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: [customEmojiId],\n  });\n  if (!customEmoji?.[0]) {\n    if (webAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SUGGESTED_EMOJI_INVALID',\n          },\n        },\n        tabId,\n      });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    suggestedStatusModal: {\n      customEmojiId,\n      duration,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('markBotVerificationInfoShown', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n\n  const currentPeerIds = global.settings.botVerificationShownPeerIds;\n  const newPeerIds = unique([peerId, ...currentPeerIds]).slice(0, BOT_VERIFICATION_PEERS_LIMIT);\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      botVerificationShownPeerIds: newPeerIds,\n    },\n  };\n\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { WebApp, WebAppModalStateType } from '../../types/webapp';\nimport type {\n  GlobalState, TabArgs,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectActiveWebApp, selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp <T extends GlobalState>(\n  global: T, key: string, webAppUpdate: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const originalWebApp = openedWebApps[key];\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webAppUpdate,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: webAppKey,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebAppKey: key },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const activeWebAppKey = currentTabState.webApps.activeWebAppKey;\n\n  if (!activeWebAppKey) return global;\n\n  return removeWebAppFromOpenList(global, activeWebAppKey, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, key: string, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const { openedWebApps, openedOrderedKeys, activeWebAppKey } = currentTabState.webApps;\n  const webApp = openedWebApps[key];\n  if (!webApp) return global;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, key, { isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = openedOrderedKeys.filter((k) => k !== removingWebAppKey);\n  }\n\n  const isRemovedAppActive = activeWebAppKey === getWebAppKey(webApp);\n\n  const openedWebAppsKeys = Object.keys(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebAppKey: openedWebAppsCount\n          ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      ([, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebAppKey: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = selectActiveWebApp(global, tabId);\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  const newActiveWebAppKey = getWebAppKey(newActiveWebApp);\n\n  if (newActiveWebAppKey) {\n    webAppsNotAllowedToClose[newActiveWebAppKey] = {\n      ...newActiveWebApp,\n      isCloseModalOpen: true,\n    };\n  }\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => webAppsNotAllowedToClose[k]);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebAppKey: newActiveWebAppKey,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { WebApp } from '../../../types/webapp';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport {\n  type ApiChat,\n  type ApiContact,\n  type ApiInputMessageReplyInfo,\n  type ApiPeer,\n  type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getWebAppKey,\n} from '../../helpers/bots';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser,\n  updateBotAppPermissions,\n  updateManagementProgress,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList,\n  replaceInlineBotSettings,\n  replaceInlineBotsIsLoading,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { fetchChatByUsername } from './chats';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${botSender.usernames![0].username} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, threadId, chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    appName: bot.firstName,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam, isFullscreen,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n    isFullscreen,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullScreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullScreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, mode, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n    mode,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullscreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n      },\n    },\n  };\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, mode, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const { url, isFullscreen } = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    mode,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot!.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    appName: appName && bot.firstName,\n    peerId,\n    botId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = global.settings.byKey.language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserEmojiStatusPermission', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, isEnabled, isBotAccessEmojiGranted,\n  } = payload;\n\n  const bot = selectBot(global, botId);\n\n  if (!botId || !bot) {\n    return;\n  }\n\n  const result = await callApi('toggleUserEmojiStatusPermission', {\n    bot, isEnabled,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, botId, {\n    isBotCanManageEmojiStatus: isEnabled,\n    isBotAccessEmojiGranted,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserLocationPermission', (global, actions, payload): ActionReturnType => {\n  const {\n    botId, isAccessGranted,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  global = getGlobal();\n  global = updateBotAppPermissions(global, bot.id, { geolocation: isAccessGranted });\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: email,\n  }, tabId);\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { errorKey: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type {\n  ApiInputInvoice, ApiInputInvoiceStarGift, ApiRequestInputInvoice,\n} from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { RegularLangFnParameters } from '../../../util/localization';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n  getRequestInputSavedStarGift,\n} from '../../helpers/payments';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, message, shouldHideName, shouldUpgrade, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    peerId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n    shouldUpgrade: shouldUpgrade || undefined,\n  };\n\n  payInputStarInvoice(global, inputInvoice, gift.stars, tabId);\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { directInfo, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || directInfo?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || directInfo?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: directInfo ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n      && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { descriptionKey: { key: 'ErrorUnexpected' } satisfies RegularLangFnParameters };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forPeerId: forUserId,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { messageKey: { key: 'ErrorUnexpected' }, field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { messageKey: result.messageKey, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('upgradeGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, shouldKeepOriginalDetails, upgradeStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftUpgrade: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftUpgradeModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!upgradeStars) {\n    callApi('upgradeStarGift', {\n      inputSavedGift: requestSavedGift,\n      shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftUpgrade',\n    inputSavedGift: gift,\n    shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n  };\n\n  payInputStarInvoice(global, invoice, upgradeStars, tabId);\n});\n\naddActionHandler('transferGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, recipientId, transferStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectChat(global, recipientId);\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!peer || !requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftTransfer: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftTransferModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!transferStars) {\n    callApi('transferStarGift', {\n      inputSavedGift: requestSavedGift,\n      toPeer: peer,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftTransfer',\n    inputSavedGift: gift,\n    recipientId,\n  };\n\n  payInputStarInvoice(global, invoice, transferStars, tabId);\n});\n\nasync function payInputStarInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice, price: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const actions = getActions();\n  const balance = global.stars?.balance;\n\n  if (balance === undefined) return;\n\n  if (balance.amount < price) {\n    actions.openStarsBalanceModal({ tabId });\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    directInfo: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n}\n\naddActionHandler('openUniqueGiftBySlug', async (global, actions, payload): Promise<void> => {\n  const {\n    slug, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gift = await callApi('fetchUniqueStarGift', { slug });\n\n  if (!gift) {\n    actions.showNotification({\n      message: {\n        key: 'GiftWasNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.openGiftInfoModal({ gift, tabId });\n});\n\naddActionHandler('processStarGiftWithdrawal', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, password, tabId = getCurrentTabId(),\n  } = payload;\n\n  let giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  global = updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      isLoading: true,\n      errorKey: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const inputGift = getRequestInputSavedStarGift(global, gift);\n  if (!inputGift) {\n    return;\n  }\n\n  const result = await callApi('fetchStarGiftWithdrawalUrl', { inputGift, password });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  if ('error' in result) {\n    global = updateTabState(global, {\n      giftWithdrawModal: {\n        ...giftWithdrawModal,\n        isLoading: false,\n        errorKey: result.messageKey,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.openUrl({ url: result.url, shouldSkipModal: true, tabId });\n  actions.closeGiftWithdrawModal({ tabId });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiSavedStarGift } from '../../../api/types';\nimport type { StarGiftCategory } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { areInputSavedGiftsEqual, getRequestInputSavedStarGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  replacePeerSavedGifts,\n  updateStarsBalance,\n  updateStarsSubscriptionLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectGiftProfileFilter,\n  selectPeer,\n  selectPeerSavedGifts,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStatus = global.stars;\n  const needsTopupOptions = !currentStatus?.topupOptions;\n\n  const [status, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!status || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stars: {\n      ...currentStatus,\n      balance: status.balance,\n      topupOptions: topupOptions || currentStatus!.topupOptions,\n      history: {\n        all: undefined,\n        inbound: undefined,\n        outbound: undefined,\n      },\n      subscriptions: undefined,\n    },\n  };\n\n  if (status.history) {\n    global = appendStarsTransactions(global, 'all', status.history, status.nextHistoryOffset);\n  }\n\n  if (status.subscriptions) {\n    global = appendStarsSubscriptions(global, status.subscriptions, status.nextSubscriptionOffset);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type } = payload;\n\n  const history = global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound' || undefined,\n    isOutbound: type === 'outbound' || undefined,\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  const byId = buildCollectionByKey(result, 'id');\n\n  const idsByCategoryName: Record<StarGiftCategory, string[]> = {\n    all: [],\n    stock: [],\n    limited: [],\n  };\n\n  const allStarGiftIds = Object.keys(byId);\n  const allStarGifts = Object.values(byId);\n\n  const limitedStarGiftIds = allStarGifts.map((gift) => (gift.isLimited ? gift.id : undefined))\n    .filter(Boolean) as string[];\n\n  const stockedStarGiftIds = allStarGifts.map((gift) => (\n    gift.availabilityRemains || !gift.availabilityTotal ? gift.id : undefined\n  )).filter(Boolean) as string[];\n\n  idsByCategoryName.all = allStarGiftIds;\n  idsByCategoryName.limited = limitedStarGiftIds;\n  idsByCategoryName.stock = stockedStarGiftIds;\n\n  allStarGifts.forEach((gift) => {\n    const starsCategory = gift.stars;\n    if (!idsByCategoryName[starsCategory]) {\n      idsByCategoryName[starsCategory] = [];\n    }\n    idsByCategoryName[starsCategory].push(gift.id);\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    starGifts: {\n      byId,\n      idsByCategory: idsByCategoryName,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSavedGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, shouldRefresh, withTransition, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const currentGifts = selectPeerSavedGifts(global, peerId, tabId);\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  global = getGlobal();\n  const fetchingFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  const result = await callApi('fetchSavedStarGifts', {\n    peer,\n    offset: !shouldRefresh ? localNextOffset : '',\n    filter: fetchingFilter,\n  });\n\n  global = getGlobal();\n  const currentFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  if (!result || currentFilter !== fetchingFilter) {\n    return;\n  }\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  const tabState = selectTabState(global, tabId);\n\n  if (withTransition) {\n    global = updateTabState(global, {\n      savedGifts: {\n        ...tabState.savedGifts,\n        transitionKey: (tabState?.savedGifts.transitionKey || 0) + 1,\n      },\n    }, tabId);\n  }\n\n  global = replacePeerSavedGifts(global, peerId, newGifts, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  global = updateStarsSubscriptionLoading(global, true);\n  setGlobal(global);\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisibility', async (global, actions, payload): Promise<void> => {\n  const { gift, shouldUnsave, tabId = getCurrentTabId() } = payload;\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const oldGifts = selectTabState(global, tabId).savedGifts.giftsByPeerId[peerId];\n  if (oldGifts?.gifts?.length) {\n    const newGifts = oldGifts.gifts.map((g) => {\n      if (g.inputGift && areInputSavedGiftsEqual(g.inputGift, gift)) {\n        return {\n          ...g,\n          isUnsaved: shouldUnsave,\n        } satisfies ApiSavedStarGift;\n      }\n      return g;\n    });\n    global = replacePeerSavedGifts(global, peerId, newGifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('saveStarGift', {\n    inputGift: requestInputGift,\n    shouldUnsave,\n  });\n  global = getGlobal();\n\n  if (!result) {\n    global = replacePeerSavedGifts(global, peerId, oldGifts.gifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  // Reload gift list to avoid issues with pagination\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabId)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const result = await callApi('convertStarGift', {\n    inputSavedGift: requestInputGift,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabId)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n  actions.openStarsBalanceModal({ tabId });\n});\n\naddActionHandler('openGiftUpgradeModal', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const samples = await callApi('fetchStarGiftUpgradePreview', {\n    giftId,\n  });\n\n  if (!samples) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftUpgradeModal: {\n      recipientId: peerId,\n      gift,\n      sampleAttributes: samples,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions:ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, shouldIgnoreDefaultPrivacy = false, tabId = getCurrentTabId(),\n  } = payload;\n  const defaultPrivacy = global.settings.paidReactionPrivacy;\n  const isPrivate = !shouldIgnoreDefaultPrivacy ? defaultPrivacy?.type === 'anonymous' : payload.isPrivate;\n  const peerId = !shouldIgnoreDefaultPrivacy\n    ? (defaultPrivacy?.type === 'peer' ? defaultPrivacy.peerId : undefined) : payload.peerId;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate, peerId);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n      peerId: paidReaction?.localPeerId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n  updateVerifyMonetizationModal,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeer,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  const chatFullInfo = selectChatFullInfo(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const dcId = chatFullInfo?.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { peer, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('processMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, currentPassword, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchMonetizationRevenueWithdrawalUrl', { peer, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: false,\n    errorKey: 'error' in result ? result.messageKey : undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if ('url' in result) {\n    actions.openUrl({\n      url: result.url,\n      shouldSkipModal: true,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n    actions.closeMonetizationVerificationModal({ tabId });\n  }\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      byPeerId: {\n        ...global.stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.profileIds?.length && peerStories?.profileIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.archiveIds?.length && peerStories?.archiveIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n    botsPrivacy: 'none',\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ApiChatType } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getWebAppKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addWebAppToOpenList,\n  clearOpenedWebApps,\n  hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps,\n  removeActiveWebAppFromOpenList,\n  removeWebAppFromOpenList,\n  replaceIsWebAppModalOpen,\n  replaceWebAppModalState,\n  updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveWebApp, selectCurrentMessageList, selectTabState, selectWebApp,\n} from '../../selectors';\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!webApp) return;\n\n  global = getGlobal();\n  global = addWebAppToOpenList(global, webApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    key, update, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, key, update, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebAppKey: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsKeys = Object.keys(openedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { key, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, key, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n  && !global.settings.byKey.shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { state, tabId = getCurrentTabId() } = payload;\n\n  return replaceWebAppModalState(global, state, tabId);\n});\n\naddActionHandler('updateMiniAppCachedPosition', (global, actions, payload): ActionReturnType => {\n  const { position } = payload;\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      miniAppsCachedPosition: position,\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('updateMiniAppCachedSize', (global, actions, payload): ActionReturnType => {\n  const { size } = payload;\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      miniAppsCachedSize: size,\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const activeWebApp = selectActiveWebApp(global, tabId);\n  if (!activeWebApp?.url) return undefined;\n\n  const key = getWebAppKey(activeWebApp);\n\n  return updateWebApp(global, key, { slug: payload.slug }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendWebAppEvent', (global, actions, payload): ActionReturnType => {\n  const { event, webAppKey, tabId = getCurrentTabId() } = payload;\n  const webApp = selectWebApp(global, webAppKey, tabId);\n  if (!webApp) return global;\n\n  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];\n\n  actions.updateWebApp({\n    key: webAppKey,\n    update: {\n      plannedEvents: newPlannedEvents,\n    },\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    emojiStatusAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    emojiStatusAccessModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    locationAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    locationAccessModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { type ActiveDownloads, FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageDownloadableMedia,\n  getMessageStatefulContent,\n  getPeerTitle,\n  isChatChannel,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectCanForwardMessage,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      timestamp,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, scrollTargetPosition,\n    timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  const onMessageReady = timestamp\n    ? () => actions.openMediaFromTimestamp({\n      chatId, threadId, messageId, timestamp, tabId,\n    }) : undefined;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    onMessageReady?.();\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n    onLoaded: onMessageReady,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  const forwardableMessageIds = messageIds.filter((id) => {\n    const message = selectChatMessage(global, fromChatId, id);\n    return message && selectCanForwardMessage(global, message);\n  });\n\n  if (!forwardableMessageIds.length) {\n    return;\n  }\n\n  actions.openForwardMenu({ fromChatId, messageIds: forwardableMessageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = getMessageDownloadableMedia(message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getPeerTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, isSchedule,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      chatId,\n      messageIds,\n      isSchedule,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closePreparedInlineMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    preparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    sharePreparedMessageModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: OldLangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query && currentContent !== GlobalSearchContent.BotApps\n    ? { chats: !chatId, messages: true } : undefined;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n\naddActionHandler('closeSuggestedStatusModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    suggestedStatusModal: undefined,\n  }, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped, isInvertedMedia, webPageMediaSize,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n      isInvertedMedia,\n      webPageMediaSize,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : `${prefix}${PAGE_TITLE}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_GIFT_PROFILE_FILTER_OPTIONS } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { filter, peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const prevFilter = tabState.savedGifts.filter;\n  let updatedFilter = {\n    ...prevFilter,\n    ...filter,\n  };\n\n  if (!updatedFilter.shouldIncludeUnlimited\n    && !updatedFilter.shouldIncludeLimited\n    && !updatedFilter.shouldIncludeUnique) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeUnlimited: true,\n      shouldIncludeLimited: true,\n      shouldIncludeUnique: true,\n      ...filter,\n    };\n  }\n\n  if (!updatedFilter.shouldIncludeDisplayed && !updatedFilter.shouldIncludeHidden) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeDisplayed: true,\n      shouldIncludeHidden: true,\n      ...filter,\n    };\n  }\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: updatedFilter,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, withTransition: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: {\n        ...DEFAULT_GIFT_PROFILE_FILTER_OPTIONS,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, withTransition: true, tabId: tabState.id,\n  });\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin, MediaViewerOrigin } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { getTimestampableMedia } from '../../helpers';\nimport { getMessageReplyInfo } from '../../helpers/replies';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectReplyMessage, selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, timestamp, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n      timestamp,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('openMediaFromTimestamp', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const replyInfo = getMessageReplyInfo(message);\n  const replyMessage = selectReplyMessage(global, message);\n\n  const messageMedia = getTimestampableMedia(message);\n  const maxMessageDuration = messageMedia?.duration;\n  if (maxMessageDuration) {\n    if (maxMessageDuration <= timestamp) return;\n\n    if (messageMedia.mediaType === 'video') {\n      actions.openMediaViewer({\n        chatId,\n        messageId,\n        threadId,\n        origin: MediaViewerOrigin.Inline,\n        timestamp,\n        tabId,\n      });\n      return;\n    }\n\n    actions.openAudioPlayer({\n      chatId,\n      messageId,\n      threadId,\n      origin: AudioOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  const replyMessageMedia = replyMessage ? getTimestampableMedia(replyMessage) : undefined;\n  const maxReplyMessageDuration = replyMessageMedia?.duration;\n  if (!maxReplyMessageDuration || maxReplyMessageDuration <= timestamp) return;\n\n  if (replyMessageMedia.mediaType === 'video') {\n    actions.openMediaViewer({\n      chatId: replyMessage!.chatId,\n      messageId: replyMessage!.id,\n      threadId: replyInfo?.replyToTopId,\n      origin: MediaViewerOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  actions.openAudioPlayer({\n    chatId: replyMessage!.chatId,\n    messageId: replyMessage!.id,\n    threadId: replyInfo?.replyToTopId,\n    origin: AudioOrigin.Inline,\n    timestamp,\n    tabId,\n  });\n});\n\naddActionHandler('updateLastPlaybackTimestamp', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, timestamp } = payload;\n\n  const currentChatPlaybacks = global.messages.playbackByChatId[chatId]?.byId || {};\n\n  if (!timestamp) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        playbackByChatId: {\n          ...global.messages.playbackByChatId,\n          [chatId]: {\n            byId: omit(currentChatPlaybacks, [messageId]),\n          },\n        },\n      },\n    };\n  }\n\n  return {\n    ...global,\n    messages: {\n      ...global.messages,\n      playbackByChatId: {\n        ...global.messages.playbackByChatId,\n        [chatId]: {\n          byId: {\n            ...currentChatPlaybacks,\n            [messageId]: timestamp,\n          },\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ActionReturnType, TabState } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { updateTabState } from '../reducers/tabs';\nimport { addActionHandler, type TabStateActionNames } from '..';\n\nexport function addTabStateResetterAction<ActionName extends TabStateActionNames>(\n  name: ActionName, key: keyof TabState,\n) {\n  // @ts-ignore\n  addActionHandler(name, (global, actions, payload): ActionReturnType => {\n    const { tabId = getCurrentTabId() } = payload || {};\n\n    return updateTabState(global, {\n      [key]: undefined,\n    }, tabId);\n  });\n}\n","import type { ApiInputSavedStarGift, ApiSavedStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectStarsPayment, selectTabState } from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftRecipientPicker', 'isGiftRecipientPickerOpen');\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsGiftingPickerModal', 'starsGiftingPickerModal');\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance.amount) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsBalanceModal', 'starsBalanceModal');\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddTabStateResetterAction('closeStarsTransactionModal', 'starsTransactionModal');\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsSubscriptionModal', 'starsSubscriptionModal');\n\naddTabStateResetterAction('closeGiftModal', 'giftModal');\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type !== 'starGift' && action.type !== 'starGiftUnique') return;\n\n  const starGift = action.type === 'starGift' ? action : undefined;\n  const uniqueGift = action.type === 'starGiftUnique' ? action : undefined;\n\n  const giftReceiverId = action.peerId || (message.isOutgoing ? message.chatId : global.currentUserId!);\n\n  const inputGift: ApiInputSavedStarGift = action.savedId\n    ? { type: 'chat', chatId, savedId: action.savedId }\n    : { type: 'user', messageId };\n\n  const fromId = action.fromId || (message.isOutgoing ? global.currentUserId! : message.chatId);\n\n  const gift: ApiSavedStarGift = {\n    date: message.date,\n    gift: action.gift,\n    message: starGift?.message,\n    starsToConvert: starGift?.starsToConvert,\n    isNameHidden: starGift?.isNameHidden,\n    isUnsaved: !action.isSaved,\n    fromId,\n    messageId: message.id,\n    isConverted: starGift?.isConverted,\n    upgradeMsgId: starGift?.upgradeMsgId,\n    canUpgrade: starGift?.canUpgrade,\n    alreadyPaidUpgradeStars: starGift?.alreadyPaidUpgradeStars,\n    inputGift,\n    canExportAt: uniqueGift?.canExportAt,\n    savedId: action.savedId,\n    transferStars: uniqueGift?.transferStars,\n  };\n\n  actions.openGiftInfoModal({ peerId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peerId = 'peerId' in payload ? payload.peerId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      peerId,\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftInfoModal', 'giftInfoModal');\n\naddTabStateResetterAction('closeGiftUpgradeModal', 'giftUpgradeModal');\n\naddActionHandler('openGiftWithdrawModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftWithdrawModal', 'giftWithdrawModal');\n\naddActionHandler('openGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: {\n      emojiStatus,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearGiftWithdrawError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const giftWithdrawModal = tabState?.giftWithdrawModal;\n  if (!giftWithdrawModal) return undefined;\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      errorKey: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftTransferModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    giftTransferModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftTransferModal', 'giftTransferModal');\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateVerifyMonetizationModal } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), chatId } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearMonetizationVerificationError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateVerifyMonetizationModal(global, { errorKey: undefined }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)\n          && !updatedChat?.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = addChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const isLocal = isLocalMessageId(message.id!);\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (!isLocal) {\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        });\n\n        if (hasMention) {\n          global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n        }\n\n        const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n        if (topic) {\n          global = updateTopic(global, update.chatId, topic.id, {\n            unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n            && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { applyLangPackDifference, getTranslationFn, requestLangPackDifference } from '../../../util/localization';\nimport { getPeerTitle } from '../../helpers';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder?.some((id) => id === update.id)) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        Object.entries(tabState.webApps.openedWebApps).forEach(([webAppKey, webApp]) => {\n          if (webApp.queryId === update.queryId) {\n            actions.resetDraftReplyInfo({ tabId: tabState.id });\n            actions.closeWebApp({ key: webAppKey, tabId: tabState.id });\n          }\n        });\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.private,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n      break;\n    }\n\n    case 'newMessage': {\n      const action = update.message.content?.action;\n      if (!update.message.isOutgoing && update.message.chatId !== SERVICE_NOTIFICATIONS_USER_ID) return undefined;\n      if (action?.type !== 'starGiftUnique') return undefined;\n      const actionStarGift = action.gift;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        if (tabState.isWaitingForStarGiftUpgrade) {\n          actions.openUniqueGiftBySlug({\n            slug: actionStarGift.slug,\n            tabId,\n          });\n\n          actions.showNotification({\n            title: { key: 'GiftUpgradedTitle' },\n            message: { key: 'GiftUpgradedDescription' },\n            tabId,\n          });\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftUpgrade: undefined,\n          }, tabId);\n        }\n\n        if (tabState.isWaitingForStarGiftTransfer) {\n          const chatId = update.message.chatId;\n          const receiver = chatId ? selectPeer(global, chatId) : undefined;\n          if (receiver) {\n            actions.focusMessage({\n              chatId: receiver.id,\n              messageId: update.message.id!,\n              tabId,\n            });\n\n            actions.showNotification({\n              message: {\n                key: 'GiftTransferSuccessMessage',\n                variables: {\n                  gift: {\n                    key: 'GiftUnique',\n                    variables: {\n                      title: actionStarGift.title,\n                      number: actionStarGift.number,\n                    },\n                  },\n                  peer: getPeerTitle(getTranslationFn(), receiver),\n                },\n              },\n              tabId,\n            });\n          }\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftTransfer: undefined,\n          }, tabId);\n        }\n      });\n\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          errorKey: update.messageKey,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n      const inputInvoice = paymentState.inputInvoice;\n      if (inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else if (inputInvoice?.type === 'giftcode') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice?.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'GiftSent',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo, form } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (form?.invoice.subscriptionPeriod) {\n        const amount = form.invoice.totalAmount;\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            form.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: langProvider.oldTranslate('StarsGiftCompleted'),\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'stargift') {\n        if (!inputInvoice.peerId) {\n          return;\n        }\n\n        const starGiftModalState = selectTabState(global, tabId).giftModal;\n\n        if (starGiftModalState && inputInvoice.peerId === starGiftModalState.forPeerId) {\n          actions.showNotification({\n            message: langProvider.oldTranslate('StarsGiftCompleted'),\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      const stars = global.stars;\n      if (!stars) {\n        return;\n      }\n\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <Icon name=\"new-chat-filled\" />\n        <Icon name=\"close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: { text: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats') },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('FilterShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDelete'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title: renderTextWithEntities({\n          text: title.text,\n          entities: title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }),\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { OldLangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: OldLangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme } from '../../../global/selectors';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {oldLang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = global.settings.byKey;\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatusType;\n  collectibleStatuses?: ApiEmojiStatusType[];\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus, collectibleStatuses }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? (emojiStatus.until - getServerTime()) * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && emojiStatus.documentId !== prevEmojiStatus?.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    const collectibleStatus = collectibleStatuses?.find(\n      ((status) => 'collectibleId' in status && status.documentId === sticker.id),\n    ) as ApiEmojiStatusCollectible | undefined;\n    markShouldShowEffect();\n    setEmojiStatus({\n      emojiStatus: collectibleStatus || { type: 'regular', documentId: sticker.id },\n    });\n  }, [markShouldShowEffect, setEmojiStatus, collectibleStatuses]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n            withSparkles={emojiStatus?.type === 'collectible'}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n  const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n    collectibleStatuses,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const areContactsVisible = content === LeftColumnContent.Contacts;\n  const hasMenu = content === LeftColumnContent.ChatList;\n\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchRelevant = Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts;\n\n  const isSearchFocused = isMobile ? !isMessageListOpen && isSearchRelevant : isSearchRelevant;\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const withStoryToggler = !isSearchFocused\n    && !selectedSearchDate && !globalSearchChatId && !areContactsVisible;\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PeerChip\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item\"\n            onClick={setGlobalSearchDate}\n            isCloseNonDestructive\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PeerChip\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          resultsItemSelector=\".LeftSearch .ListItem-button\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler\n            canShow={withStoryToggler}\n          />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <Icon name=\"lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyGifts:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBirthday);\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGifts);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newPinnedIndex),\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedIndexAboveFocused),\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newIndex),\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n\nfunction clampIndex(id: number) {\n  return Math.max(0, id);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <Icon name={icon} className={styles.icon} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll({\n        container: messagesContainer,\n        element: lastMessageElement,\n        position: 'end',\n        margin: FOCUS_MARGIN,\n      });\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean,\n) {\n  const initDateGroup: MessageDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [[]],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [initDateGroup];\n\n  messages.forEach((message, index) => {\n    const currentDateGroup = dateGroups[dateGroups.length - 1];\n    const currentSenderGroup = currentDateGroup.senderGroups[currentDateGroup.senderGroups.length - 1];\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastMessageInSenderGroup = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage && !currentAlbum) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        const newDateGroup: MessageDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [[]],\n        };\n        dateGroups.push(newDateGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && message.content.action?.type !== 'phoneCall')\n        || (isActionMessage(nextMessage) && nextMessage.content.action?.type !== 'phoneCall')\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastMessageInSenderGroup\n              && 'mainMessage' in lastMessageInSenderGroup\n              && lastMessageInSenderGroup.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentDateGroup.senderGroups.push([]);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user!))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sqThK406\",\"bot-info\":\"XhDB6LWO\",\"botInfo\":\"XhDB6LWO\",\"bot-info-description\":\"lbMO1XqP\",\"botInfoDescription\":\"lbMO1XqP\",\"bot-info-title\":\"ELYpyMpR\",\"botInfoTitle\":\"ELYpyMpR\",\"media\":\"zLLIV9Iw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useOldLang();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {lang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Tk8btfOT\",\"avatarContainer\":\"UPrRM3Ks\",\"senderAvatar\":\"jdvqXfYh\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n} from '../../../api/types';\n\nimport {\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isSystemBot,\n} from '../../../global/helpers';\nimport {\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectSender,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './SenderGroupContainer.module.scss';\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    withAvatar?: boolean;\n    children: React.ReactNode;\n    id: string;\n  };\n\n  type StateProps = {\n    sender?: ApiPeer;\n    canShowSender: boolean;\n    originSender?: ApiPeer;\n    isChatWithSelf?: boolean;\n    isRepliesChat?: boolean;\n    isAnonymousForwards?: boolean;\n  };\n\nconst SenderGroupContainer: FC<OwnProps & StateProps> = ({\n  message,\n  withAvatar,\n  children,\n  id,\n  sender,\n  canShowSender,\n  originSender,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n}) => {\n  const { openChat } = getActions();\n\n  const { forwardInfo } = message;\n\n  const messageSender = canShowSender ? sender : undefined;\n\n  const shouldPreferOriginSender = forwardInfo\n  && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        className={styles.senderAvatar}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  const className = buildClassName(\n    'sender-group-container',\n    styles.root,\n  );\n\n  return (\n    <div id={id} className={className}>\n      {withAvatar && (\n        <div className={styles.avatarContainer}>\n          {renderAvatar()}\n        </div>\n      )}\n      {children}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      message, withAvatar,\n    } = ownProps;\n    const { chatId } = message;\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n\n    return {\n      sender,\n      canShowSender,\n      originSender,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n    };\n  },\n)(SenderGroupContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n  getMessageDownloadableMedia,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ISettings['theme'];\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openUrl,\n    hideSponsoredMessages,\n    clickSponsoredMessage,\n    openMediaViewer,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ peerId: chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsoredMessages();\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsoredMessage({ isMedia: photo || isGif ? true : undefined, peerId: chatId });\n    openUrl({ url: message.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    clickSponsoredMessage({ isMedia: true, peerId: chatId });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const handleOpenAboutAdsModal = useLastCallback(() => {\n    openAboutAdsModal({ chatId });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <BadgeButton onClick={handleOpenAboutAdsModal} className=\"ad-about\">\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          message={message!}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? getMessageDownloadableMedia(message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dates/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './message/ActionMessage';\nimport Message from './message/Message';\nimport SenderGroupContainer from './message/SenderGroupContainer';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  canShowAds?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  canShowAds,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useOldLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  function calculateSenderGroups(\n    dateGroup: MessageDateGroup, dateGroupIndex: number, dateGroupsArray: MessageDateGroup[],\n  ) {\n    return dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && senderGroup[0].content.action?.type !== 'phoneCall'\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            getIsMessageListReady={getIsReady}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      const senderGroupElements = senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n\n      if (!withUsers) return senderGroupElements;\n\n      const lastMessageOrAlbum = senderGroup[senderGroup.length - 1];\n      const lastMessage = isAlbum(lastMessageOrAlbum) ? lastMessageOrAlbum.mainMessage : lastMessageOrAlbum;\n      const lastMessageId = getMessageOriginalId(lastMessage);\n\n      const isTopicTopMessage = lastMessage.id === threadId;\n      const isOwn = isOwnMessage(lastMessage);\n\n      const firstMessageOrAlbum = senderGroup[0];\n      const firstMessage = isAlbum(firstMessageOrAlbum) ? firstMessageOrAlbum.mainMessage : firstMessageOrAlbum;\n      const firstMessageId = getMessageOriginalId(firstMessage);\n\n      const key = `${firstMessageId}-${lastMessageId}`;\n      const id = (firstMessageId === lastMessageId) ? `message-group-${firstMessageId}`\n        : `message-group-${firstMessageId}-${lastMessageId}`;\n\n      const withAvatar = withUsers && !isOwn && (!isTopicTopMessage || !isComments);\n      return (\n        <SenderGroupContainer\n          key={key}\n          id={id}\n          message={lastMessage}\n          withAvatar={withAvatar}\n        >\n          {senderGroupElements}\n        </SenderGroupContainer>\n      );\n    });\n  }\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = calculateSenderGroups(dateGroup, dateGroupIndex, dateGroupsArray);\n\n    return (\n      <div\n        className={buildClassName('message-date-group', dateGroupIndex === 0 && 'first-message-date-group')}\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n      {canShowAds && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    const fabTrigger = fabTriggerRef.current;\n    if (!container || !fabTrigger) return;\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const fabOffsetTop = fabTrigger.offsetTop;\n    const scrollBottom = Math.round(fabOffsetTop - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\nimport type { MessageListType } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: OldLangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: OldLangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <Icon name=\"cloud-download\" className=\"no-messages-icon\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFp81o13\",\"button\":\"KJVF1etk\",\"disabled\":\"Mii8vuoC\",\"inner\":\"xzZFmIqC\",\"icons-container\":\"vyeCoKP3\",\"iconsContainer\":\"vyeCoKP3\",\"animated-unlock\":\"YVmR5pRi\",\"animatedUnlock\":\"YVmR5pRi\",\"comments-icon\":\"ouB5dgHN\",\"commentsIcon\":\"ouB5dgHN\",\"description\":\"oEQISdJD\"};","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTheme, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\n\nimport styles from './PremiumRequiredMessage.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  userName?: string;\n};\n\nfunction PremiumRequiredMessage({ patternColor, userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {renderText(lang('MessageLockedPremium', userName), ['simple_markdown'])}\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"tiny\"\n          onClick={handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {lang('MessagePremiumUnlock')}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = global.settings.themes[theme] || {};\n    const user = selectUser(global, userId);\n\n    return {\n      patternColor,\n      userName: getUserFirstOrLastName(user),\n    };\n  })(PremiumRequiredMessage),\n);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  beginHeavyAnimation, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatFullInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type MessageListType, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport getOffsetToContainer from '../../util/visibility/getOffsetToContainer';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport PremiumRequiredMessage from './PremiumRequiredMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  isContactRequirePremium?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n  isChatProtected?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  areAdsEnabled,\n  channelJoinInfo,\n  isChatProtected,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    const canHaveAds = isChannelChat || isBot;\n    if (areAdsEnabled && canHaveAds && isSynced && isReady) {\n      loadSponsoredMessages({ peerId: chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, isBot, areAdsEnabled]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo || type !== 'thread') return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              mediaType: 'action',\n              type: 'channelJoined',\n              inviterId: channelJoinInfo?.inviterId,\n              isViaRequest: channelJoinInfo?.isViaRequest || undefined,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n      )\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat, isForum, threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n          animateScroll({\n            container,\n            element: shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            position: shouldScrollToBottom ? 'end' : 'start',\n            margin: BOTTOM_FOCUS_MARGIN,\n            forceDuration: noMessageSendingAnimation ? 0 : undefined,\n          });\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          getOffsetToContainer(unreadDivider, container).top - UNREAD_DIVIDER_TOP,\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n    isChatProtected && 'hide-on-print',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isContactRequirePremium && !hasMessages ? (\n        <PremiumRequiredMessage userId={chatId} />\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          canShowAds={areAdsEnabled && isChannelChat}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onIntersectPinnedMessage={onIntersectPinnedMessage}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      isChatProtected: selectIsChatProtected(global, chatId),\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container);\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  const computedStyle = getComputedStyle(container);\n  const headerActionsHeight = parseInt(computedStyle.getPropertyValue('--middle-header-panes-height'), 10);\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= headerActionsHeight + STICKY_TOP;\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n  MediaContent,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent, getPeerTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message?: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = message ? getMessageContent(message) : {} satisfies MediaContent;\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getPeerTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n  MediaContent,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getPeerTitle, isMessageLocal,\n} from '../../../global/helpers';\nimport {\n  selectChat, selectChatMessage, selectSender, selectTabState,\n} from '../../../global/selectors';\nimport { makeTrackId } from '../../../util/audioPlayer';\nimport buildClassName from '../../../util/buildClassName';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { clearMediaSession } from '../../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport renderText from '../../common/helpers/renderText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useAudioPlayer from '../../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  className?: string;\n  noUi?: boolean;\n  isFullWidth?: boolean;\n  isHidden?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n  timestamp?: number;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n  isFullWidth,\n  timestamp,\n  onPaneStateChange,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n  const renderingMessage = useCurrentOrPrev(message);\n\n  const { audio, voice, video } = renderingMessage ? getMessageContent(renderingMessage) : {} satisfies MediaContent;\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getPeerTitle(lang, sender) : undefined;\n\n  const mediaHash = renderingMessage && getMessageMediaHash(renderingMessage, 'inline');\n  const mediaData = mediaHash && mediaLoader.getFromMemory(mediaHash);\n  const mediaMetadata = useMessageMediaMetadata(renderingMessage, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n    setCurrentTime,\n  } = useAudioPlayer(\n    message && makeTrackId(message),\n    message ? getMediaDuration(message)! : 0,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    message && isMessageLocal(message),\n    true,\n  );\n\n  const isOpen = Boolean(message);\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(transitionRef, !shouldRender);\n\n  useEffect(() => {\n    if (timestamp) {\n      setCurrentTime(timestamp);\n    }\n  }, [timestamp, setCurrentTime]);\n\n  const handleClick = useLastCallback(() => {\n    const { chatId, id } = renderingMessage!;\n    focusMessage({ chatId, messageId: id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi || !shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      ref={ref}\n    >\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <Icon name=\"skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <Icon name=\"play\" />\n        <Icon name=\"pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <Icon name=\"skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <Icon name=\"placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { isHidden }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const { chatId, messageId } = audioPlayer;\n    const message = !isHidden && chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    const sender = message && selectSender(global, message);\n    const chat = message && selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive, timestamp,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      message,\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n      timestamp,\n    };\n  },\n)(AudioPlayer);\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tE8PJzpv\",\"mini\":\"lrBhOgvf\",\"fullWidth\":\"gutn4asD\",\"pinnedMessage\":\"ayLUtX1S\",\"messageText\":\"ETMw73qH\",\"loading\":\"yvd9_9PF\",\"pinListIcon\":\"LFRysfVa\",\"pinListIconHidden\":\"E_C4DXKN\",\"no-hover\":\"WVjde2rq\",\"noHover\":\"WVjde2rq\",\"messageTextTransition\":\"mA1i07pG\",\"withMedia\":\"BWZytkCB\",\"title\":\"IWpRWVBg\",\"summary\":\"k19QLKaH\",\"inlineButton\":\"fpQMpARI\",\"pictogramTransition\":\"Gp431jU4\",\"pinnedThumb\":\"XjjZeOUy\",\"pinnedThumbImage\":\"ljzqevcj\"};","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  getIsSavedDialog,\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageSingleInlineButton,\n  getMessageVideo,\n  getPeerTitle,\n} from '../../../global/helpers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectPinnedIds,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useThumbnail from '../../../hooks/useThumbnail';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport MessageSummary from '../../common/MessageSummary';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RippleEffect from '../../ui/RippleEffect';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\nimport PinnedMessageNavigation from '../PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst MAX_LENGTH = 256;\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  // eslint-disable-next-line react/no-unused-prop-types\n  messageListType: MessageListType;\n  className?: string;\n  isFullWidth?: boolean;\n  shouldHide?: boolean;\n  getLoadingPinnedId: Signal<number | undefined>;\n  getCurrentPinnedIndex: Signal<number>;\n  onFocusPinnedMessage: (messageId: number) => void;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  isSynced?: boolean;\n};\n\nconst HeaderPinnedMessage = ({\n  chatId,\n  threadId,\n  canUnpin,\n  getLoadingPinnedId,\n  pinnedMessageIds,\n  messagesById,\n  isFullWidth,\n  topMessageSender,\n  getCurrentPinnedIndex,\n  className,\n  chat,\n  isSynced,\n  shouldHide,\n  onPaneStateChange,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    clickBotInlineButton, focusMessage, openThread, pinMessage, loadPinnedMessages,\n  } = getActions();\n  const lang = useLang();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);\n\n  const topMessageTitle = topMessageSender ? getPeerTitle(lang, topMessageSender) : undefined;\n\n  const video = pinnedMessage && getMessageVideo(pinnedMessage);\n  const gif = video?.isGif ? video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaThumbnail = useThumbnail(pinnedMessage);\n  const mediaHash = pinnedMessage && getMessageMediaHash(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isSpoiler = pinnedMessage && getMessageIsSpoiler(pinnedMessage);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n\n  useEffect(() => {\n    if (isSynced && (threadId === MAIN_THREAD_ID || chat?.isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, chat?.isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const isOpen = Boolean(pinnedMessage) && !shouldHide;\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    noOpenTransition: true,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n    pinMessage({ chatId, messageId: pinnedMessage!.id, isUnpin: true });\n  });\n\n  const inlineButton = pinnedMessage && getMessageSingleInlineButton(pinnedMessage);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: pinnedMessage.chatId, messageId: pinnedMessage.id, button: inlineButton });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const handleMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId: nextMessageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(nextMessageId);\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(handleMessageClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, isFullVideo?: boolean, asSpoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n    const shouldRenderVideo = isFullVideo && blobUrl;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !asSpoiler && !shouldRenderVideo && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {shouldRenderVideo && !asSpoiler && (\n          <video\n            src={blobUrl}\n            width={width}\n            height={height}\n            playsInline\n            disablePictureInPicture\n            className={styles.pinnedThumbImage}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(asSpoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  if (!shouldRender || !renderingPinnedMessage) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'HeaderPinnedMessageWrapper', styles.root, isFullWidth ? styles.fullWidth : styles.mini, className,\n      )}\n    >\n      {(pinnedMessagesCount > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? handleAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <Icon\n            name=\"pin-list\"\n            className={buildClassName(\n              styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {canUnpin && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text={lang('PinnedConfirmUnpin')}\n        confirmLabel={lang('DialogUnpin')}\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={pinnedMessagesCount}\n          index={currentPinnedIndex}\n        />\n        <Transition activeKey={renderingPinnedMessage.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isVideoThumbnail,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!topMessageTitle && (\n              <AnimatedCounter\n                text={pinnedMessagesCount === 1\n                  ? lang('PinnedMessageTitleSingle')\n                  : lang('PinnedMessageTitle', { index: pinnedMessageNumber }, { pluralValue: pinnedMessagesCount })}\n              />\n            )}\n\n            {topMessageTitle && renderText(topMessageTitle)}\n          </div>\n          <Transition\n            activeKey={renderingPinnedMessage.id}\n            name=\"slideVerticalFade\"\n            className={styles.messageTextTransition}\n          >\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={renderingPinnedMessage}\n                truncateLength={MAX_LENGTH}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const isSynced = global.isSynced;\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const messagesById = selectChatMessages(global, chatId);\n\n    const state = {\n      chat,\n      isSynced,\n    };\n\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(HeaderPinnedMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { type MessageListType, StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n} from '../../config';\nimport {\n  getIsSavedDialog,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport HeaderActions from './HeaderActions';\nimport AudioPlayer from './panes/AudioPlayer';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSavedDialog?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  emojiStatusSlug?: string;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  emojiStatusSlug,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    openChat,\n    openPreviousChat,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openStickerSet,\n    updateMiddleSearch,\n    openUniqueGiftBySlug,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const { isDesktop } = useAppLayout();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const isAudioPlayerActive = Boolean(audioMessage);\n  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;\n  const isPinnedMessagesFullWidth = isAudioPlayerActive || !isDesktop;\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n      {!isPinnedMessagesFullWidth && (\n        <HeaderPinnedMessage\n          key={chatId}\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          onFocusPinnedMessage={onFocusPinnedMessage}\n          getLoadingPinnedId={getLoadingPinnedId}\n          getCurrentPinnedIndex={getCurrentPinnedIndex}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendering && (\n          <AudioPlayer />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendering}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n    const emojiStatusSlug = emojiStatus?.type === 'collectible' ? emojiStatus.slug : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    return {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      emojiStatusSlug,\n      isSavedDialog,\n    };\n  },\n)(MiddleHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yMkfzjus\",\"content\":\"__w9Ejd3\",\"info\":\"wdU19Be7\",\"avatar\":\"AQFE1t4V\",\"title\":\"u2vIptvT\",\"text\":\"SVG6BaX3\",\"aboutAd\":\"SrgXYpPk\"};","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { MessageListType } from '../../../types';\n\nimport { selectBot, selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport SponsoredMessageContextMenuContainer from '../message/SponsoredMessageContextMenuContainer';\n\nimport styles from './BotAdPane.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  messageListType: MessageListType;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  isBot?: boolean;\n  sponsoredMessage?: ApiSponsoredMessage;\n};\n\nconst BotAdPane = ({\n  chatId,\n  isBot,\n  messageListType,\n  sponsoredMessage,\n  onPaneStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    viewSponsoredMessage,\n    openUrl,\n    clickSponsoredMessage,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');\n\n  const renderingSponsoredMessage = useCurrentOrPrev(sponsoredMessage);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    withResizeObserver: true,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !shouldRender, true);\n\n  const handleClick = useLastCallback(() => {\n    if (!renderingSponsoredMessage) return;\n\n    clickSponsoredMessage({ peerId: chatId });\n    openUrl({ url: renderingSponsoredMessage.url, shouldSkipModal: true });\n  });\n\n  const handleAboutClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    openAboutAdsModal({ chatId });\n  });\n\n  useEffect(() => {\n    if (shouldRender && sponsoredMessage) {\n      viewSponsoredMessage({ peerId: chatId });\n    }\n  }, [shouldRender, sponsoredMessage, chatId]);\n\n  if (!shouldRender || !renderingSponsoredMessage) {\n    return undefined;\n  }\n\n  const {\n    peerColor,\n    content,\n    photo,\n    title,\n  } = renderingSponsoredMessage;\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className={styles.root}\n        onClick={handleClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <div className={buildClassName(styles.content, peerColor && getApiPeerColorClass(peerColor))}>\n          <span className={styles.info}>\n            {lang('SponsoredMessageAd')}\n            <BadgeButton onClick={handleAboutClick} className={styles.aboutAd}>\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          <div className={styles.title}>{title}</div>\n          {content.text && (\n            <div className={styles.text}>\n              {renderTextWithEntities({\n                text: content.text.text,\n                entities: content.text.entities,\n              })}\n            </div>\n          )}\n        </div>\n        {photo && (\n          <Avatar\n            size=\"large\"\n            photo={photo}\n            className={styles.avatar}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          message={renderingSponsoredMessage}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const bot = selectBot(global, chatId);\n    const sponsoredMessage = selectSponsoredMessage(global, chatId);\n    return {\n      isBot: Boolean(bot),\n      sponsoredMessage,\n    };\n  },\n)(BotAdPane));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotVerification } from '../../../api/types';\n\nimport {\n  selectPeerFullInfo,\n} from '../../../global/selectors';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './BotVerificationPane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  wasShown: boolean;\n  botVerification?: ApiBotVerification;\n};\nconst BOT_VERIFICATION_ICON_SIZE = 16;\nconst DISPLAY_DURATION_MS = 5000; // 5 sec\n\nconst BotVerificationPane: FC<OwnProps & StateProps> = ({\n  peerId,\n  wasShown,\n  botVerification,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(!wasShown && botVerification);\n\n  const {\n    markBotVerificationInfoShown,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const markAsShowed = useLastCallback(() => {\n    markBotVerificationInfoShown({ peerId });\n  });\n  useTimeout(markAsShowed, !wasShown ? DISPLAY_DURATION_MS : undefined);\n\n  if (!shouldRender || !botVerification) return undefined;\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <span className={styles.icon}>\n        <CustomEmoji\n          documentId={botVerification.iconId}\n          size={BOT_VERIFICATION_ICON_SIZE}\n        />\n      </span>\n      {botVerification.description}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const peerFullInfo = selectPeerFullInfo(global, peerId);\n\n    const botVerification = peerFullInfo?.botVerification;\n    const wasShown = global.settings.botVerificationShownPeerIds.includes(peerId);\n\n    return {\n      botVerification,\n      wasShown,\n    };\n  },\n)(BotVerificationPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sAWttcxl\",\"icon\":\"tK9d2y8u\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './ChatReportPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  peer?: ApiPeer;\n};\n\nconst ChatReportPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  className,\n  isAutoArchived,\n  canReportSpam,\n  canAddContact,\n  canBlockContact,\n  peer,\n  currentUserId,\n  onPaneStateChange,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPane,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n\n  const renderingPeer = useCurrentOrPrev(peer);\n  const chat = renderingPeer && isApiPeerChat(renderingPeer) ? renderingPeer : undefined;\n  const user = renderingPeer && isApiPeerUser(renderingPeer) ? renderingPeer : undefined;\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const renderingCanAddContact = useCurrentOrPrev(canAddContact);\n  const renderingCanBlockContact = useCurrentOrPrev(canBlockContact);\n  const renderingCanReportSpam = useCurrentOrPrev(canReportSpam);\n  const renderingIsAutoArchived = useCurrentOrPrev(isAutoArchived);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (renderingIsAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (renderingCanReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPane = useLastCallback(() => {\n    hideChatReportPane({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;\n\n  const isRendering = Boolean(hasAnyButton && peer);\n\n  useEffect(() => {\n    if (!isRendering) {\n      closeBlockUserModal();\n    }\n  }, [isRendering]);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('ChatReportPane', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {renderingCanAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {renderingCanReportSpam && !renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={handleCloseReportPane}\n        ariaLabel={lang('Close')}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            className=\"ChatReportPane--Checkbox dialog-checkbox\"\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    peer: selectPeer(global, chatId),\n  }),\n)(ChatReportPane));\n","import React, {\n  memo, useRef, useSignal,\n} from '../../lib/teact/teact';\nimport { setExtraStyles } from '../../lib/teact/teact-dom';\nimport { withGlobal } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport { type ApiChat, MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectCurrentMiddleSearch, selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport { applyAnimationState, type PaneState } from './hooks/useHeaderPane';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport AudioPlayer from './panes/AudioPlayer';\nimport BotAdPane from './panes/BotAdPane';\nimport BotVerificationPane from './panes/BotVerificationPane';\nimport ChatReportPane from './panes/ChatReportPane';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport styles from './MiddleHeaderPanes.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isAudioPlayerRendered?: boolean;\n  isMiddleSearchOpen?: boolean;\n};\n\nconst FALLBACK_PANE_STATE = { height: 0 };\n\nconst MiddleHeaderPanes = ({\n  className,\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  isAudioPlayerRendered,\n  isMiddleSearchOpen,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const { settings } = chat || {};\n\n  const { isDesktop } = useAppLayout();\n  const [getAudioPlayerState, setAudioPlayerState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPinnedState, setPinnedState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getGroupCallState, setGroupCallState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getChatReportState, setChatReportState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotAdState, setBotAdState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotVerificationState, setBotVerificationState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered || !isDesktop;\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isMiddleSearchOpen,\n    withShouldRender: true,\n    noMountTransition: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  useSignalEffect(() => {\n    const audioPlayerState = getAudioPlayerState();\n    const botVerificationState = getBotVerificationState();\n    const pinnedState = getPinnedState();\n    const groupCallState = getGroupCallState();\n    const chatReportState = getChatReportState();\n    const botAdState = getBotAdState();\n\n    // Keep in sync with the order of the panes in the DOM\n    const stateArray = [audioPlayerState, groupCallState,\n      chatReportState, botVerificationState, pinnedState, botAdState];\n\n    const isFirstRender = isFirstRenderRef.current;\n    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);\n\n    const middleColumn = document.getElementById('MiddleColumn');\n    if (!middleColumn) return;\n\n    applyAnimationState(stateArray, isFirstRender);\n\n    setExtraStyles(middleColumn, {\n      '--middle-header-panes-height': `${totalHeight}px`,\n    });\n  }, [getAudioPlayerState, getGroupCallState, getPinnedState,\n    getChatReportState, getBotAdState, getBotVerificationState]);\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div ref={ref} className={buildClassName(styles.root, className)}>\n      <AudioPlayer\n        isFullWidth\n        onPaneStateChange={setAudioPlayerState}\n        isHidden={isDesktop}\n      />\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          chatId={chatId}\n          onPaneStateChange={setGroupCallState}\n        />\n      )}\n      <ChatReportPane\n        chatId={chatId}\n        canAddContact={settings?.canAddContact}\n        canBlockContact={settings?.canBlockContact}\n        canReportSpam={settings?.canReportSpam}\n        isAutoArchived={settings?.isAutoArchived}\n        onPaneStateChange={setChatReportState}\n      />\n      <BotVerificationPane\n        peerId={chatId}\n        onPaneStateChange={setBotVerificationState}\n      />\n      <HeaderPinnedMessage\n        chatId={chatId}\n        threadId={threadId}\n        messageListType={messageListType}\n        onFocusPinnedMessage={onFocusPinnedMessage}\n        getLoadingPinnedId={getLoadingPinnedId}\n        getCurrentPinnedIndex={getCurrentPinnedIndex}\n        onPaneStateChange={setPinnedState}\n        isFullWidth\n        shouldHide={!isPinnedMessagesFullWidth}\n      />\n      <BotAdPane\n        chatId={chatId}\n        messageListType={messageListType}\n        onPaneStateChange={setBotAdState}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId,\n  }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    return {\n      chat,\n      isAudioPlayerRendered: Boolean(audioMessage),\n      isMiddleSearchOpen,\n    };\n  },\n)(MiddleHeaderPanes));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oCUr3DTX\"};","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic,\n} from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n  ThemeKey,\n  ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_SAFARI, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './message/hooks/useFluidBackgroundFilter';\n\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MiddleHeaderPanes from './MiddleHeaderPanes';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nfunction isVideo(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_VIDEO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useOldLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    // In Safari, the e.dataTransfer.items list may be empty during dragenter/dragover events,\n    // preventing the ability to determine file types in advance. More details: https://bugs.webkit.org/show_bug.cgi?id=223517\n    const shouldDrawQuick = IS_SAFARI || (items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every((item) => isImage(item) || isVideo(item)));\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, topics, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    ?? forumComposerPlaceholder\n    ?? (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  // Prepare filter beforehand to avoid flickering\n  useFluidBackgroundFilter(patternColor);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeaderPanes\n              key={renderingChatId}\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isMobile={isMobile}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              isBlockingAnimation\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <Icon name=\"unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const isContactRequirePremium = selectUserFullInfo(global, chatId)?.isContactRequirePremium;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !isSavedDialog,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport VerificationMonetizationModal from '../common/VerificationMonetizationModal.async';\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AboutAdsModal from './aboutAds/AboutAdsModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport EmojiStatusAccessModal from './emojiStatusAccess/EmojiStatusAccessModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftStatusInfoModal from './gift/status/GiftStatusInfoModal.async';\nimport GiftTransferModal from './gift/transfer/GiftTransferModal.async';\nimport GiftUpgradeModal from './gift/upgrade/GiftUpgradeModal.async';\nimport GiftWithdrawModal from './gift/withdraw/GiftWithdrawModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport LocationAccessModal from './locationAccess/LocationAccessModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport PreparedMessageModal from './preparedMessage/PreparedMessageModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport SharePreparedMessageModal from './sharePreparedMessage/SharePreparedMessageModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport SuggestedStatusModal from './suggestedStatus/SuggestedStatusModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n'giftCodeModal' |\n'boostModal' |\n'chatlistModal' |\n'urlAuth' |\n'mapModal' |\n'oneTimeMediaModal' |\n'inviteViaLinkModal' |\n'requestedAttachBotInstall' |\n'collectibleInfoModal' |\n'reportAdModal' |\n'reportModal' |\n'starsBalanceModal' |\n'starsPayment' |\n'starsTransactionModal' |\n'paidReactionModal' |\n'webApps' |\n'starsTransactionModal' |\n'chatInviteModal' |\n'starsSubscriptionModal' |\n'starsGiftModal' |\n'giftModal' |\n'isGiftRecipientPickerOpen' |\n'isWebAppsCloseConfirmationModalOpen' |\n'giftInfoModal' |\n'suggestedStatusModal' |\n'emojiStatusAccessModal' |\n'locationAccessModal' |\n'aboutAdsModal' |\n'giftUpgradeModal' |\n'monetizationVerificationModal' |\n'giftWithdrawModal' |\n'preparedMessageModal' |\n'sharePreparedMessageModal' |\n'giftStatusInfoModal' |\n'giftTransferModal'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n  suggestedStatusModal: SuggestedStatusModal,\n  emojiStatusAccessModal: EmojiStatusAccessModal,\n  locationAccessModal: LocationAccessModal,\n  aboutAdsModal: AboutAdsModal,\n  giftUpgradeModal: GiftUpgradeModal,\n  monetizationVerificationModal: VerificationMonetizationModal,\n  giftWithdrawModal: GiftWithdrawModal,\n  giftStatusInfoModal: GiftStatusInfoModal,\n  preparedMessageModal: PreparedMessageModal,\n  sharePreparedMessageModal: SharePreparedMessageModal,\n  giftTransferModal: GiftTransferModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedStatusModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedStatusModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedStatusModal = useModuleLoader(Bundles.Extra, 'SuggestedStatusModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SuggestedStatusModal ? <SuggestedStatusModal {...props} /> : undefined;\n};\n\nexport default SuggestedStatusModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiStatusAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiStatusAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const EmojiStatusAccessModal = useModuleLoader(Bundles.Extra, 'EmojiStatusAccessModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiStatusAccessModal ? <EmojiStatusAccessModal {...props} /> : undefined;\n};\n\nexport default EmojiStatusAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LocationAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst LocationAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const LocationAccessModal = useModuleLoader(Bundles.Extra, 'LocationAccessModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LocationAccessModal ? <LocationAccessModal {...props} /> : undefined;\n};\n\nexport default LocationAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftUpgradeModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftUpgradeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftUpgradeModal = useModuleLoader(Bundles.Stars, 'GiftUpgradeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftUpgradeModal ? <GiftUpgradeModal {...props} /> : undefined;\n};\n\nexport default GiftUpgradeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftWithdrawModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftWithdrawModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftWithdrawModal = useModuleLoader(Bundles.Stars, 'GiftWithdrawModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftWithdrawModal ? <GiftWithdrawModal {...props} /> : undefined;\n};\n\nexport default GiftWithdrawModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftStatusInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftStatusInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftStatusInfoModal = useModuleLoader(Bundles.Stars, 'GiftStatusInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftStatusInfoModal ? <GiftStatusInfoModal {...props} /> : undefined;\n};\n\nexport default GiftStatusInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PreparedMessageModal = useModuleLoader(Bundles.Extra, 'PreparedMessageModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PreparedMessageModal ? <PreparedMessageModal {...props} /> : undefined;\n};\n\nexport default PreparedMessageModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SharePreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SharePreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SharePreparedMessageModal = useModuleLoader(Bundles.Extra, 'SharePreparedMessageModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SharePreparedMessageModal ? <SharePreparedMessageModal {...props} /> : undefined;\n};\n\nexport default SharePreparedMessageModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftTransferModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftTransferModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftTransferModal = useModuleLoader(Bundles.Stars, 'GiftTransferModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftTransferModal ? <GiftTransferModal {...props} /> : undefined;\n};\n\nexport default GiftTransferModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredIds = filterPeersByQuery({\n      ids: unique([\n        ...(localContactIds || []),\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      query: searchQuery,\n      type: 'user',\n    });\n\n    return sortChatIds(\n      filteredIds.filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <Icon name=\"arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll({\n          container,\n          element: tabsEl,\n          position: 'start',\n          forceDuration: TRANSITION_DURATION,\n        });\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n\n    animateScroll({\n      container,\n      element: container.firstElementChild as HTMLElement,\n      position: 'start',\n      maxDistance: container.offsetHeight * 2,\n    });\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (Math.ceil(container.scrollTop) >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'gifts':\n      return ProfileState.GiftList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n  similarBots,\n} : {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n  similarBots?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'similarBots':\n      viewportIds = similarBots;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HN4dYXIk\",\"avatar\":\"we2fpVuo\",\"hiddenGift\":\"xY4yqqYA\",\"radialPattern\":\"_I9aOdGr\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer, ApiSavedStarGift } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift, getTotalGiftAvailability } from '../helpers/gifts';\n\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../AnimatedIconFromSticker';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './SavedGift.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  gift: ApiSavedStarGift;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst SavedGift = ({\n  peerId,\n  gift,\n  fromPeer,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [shouldPlay, play] = useFlag();\n\n  const oldLang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      peerId,\n      gift,\n    });\n  });\n\n  const handleOnIntersect = useLastCallback((entry: IntersectionObserverEntry) => {\n    if (entry.isIntersecting) play();\n  });\n\n  const avatarPeer = (gift.isNameHidden && !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  const sticker = getStickerFromGift(gift.gift);\n\n  const radialPatternBackdrop = useMemo(() => {\n    const { backdrop, pattern } = getGiftAttributes(gift.gift) || {};\n\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n      />\n    );\n  }, [gift.gift]);\n\n  useOnIntersect(ref, observeIntersection, sticker ? handleOnIntersect : undefined);\n\n  if (!sticker) return undefined;\n\n  const totalIssued = getTotalGiftAvailability(gift.gift);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onClick={handleClick}\n    >\n      {radialPatternBackdrop}\n      {!radialPatternBackdrop && <Avatar className={styles.avatar} peer={avatarPeer} size=\"micro\" />}\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        noLoop\n        play={shouldPlay}\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-closed-outline\" />\n        </div>\n      )}\n      {totalIssued && (\n        <GiftRibbon\n          color=\"blue\"\n          text={oldLang('Gift2Limited1OfRibbon', formatIntegerCompact(totalIssued))}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { gift }): StateProps => {\n    const fromPeer = gift.fromId ? selectPeer(global, gift.fromId) : undefined;\n\n    return {\n      fromPeer,\n    };\n  },\n)(SavedGift));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageMediaHash, getMessageMediaThumbDataUri,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = getMessageMediaThumbDataUri(media);\n\n  const mediaBlobUrl = useMedia(getMessageMediaHash(media, 'preview'), !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): StateProps => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig || {};\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiSavedStarGift,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType, ThreadId,\n} from '../../types';\nimport type { RegularLangKey } from '../../types/language';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  getMessageDownloadableMedia,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerStories,\n  selectSimilarBotsIds,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport SavedGift from '../common/gift/SavedGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Icon from '../common/icons/Icon';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Link from '../ui/Link';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  isBot?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiSavedStarGift[];\n  giftsTransitionKey: number;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  similarBots?: string[];\n  botPreviewMedia? : ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarPeers: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n  { type: 'audio', key: 'ProfileTabMusic' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  threadId,\n  profileState,\n  theme,\n  isChannel,\n  isBot,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  giftsTransitionKey,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  similarBots,\n  isCurrentUserPremium,\n  limitSimilarPeers,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadBotRecommendations,\n    loadPreviewMedias,\n    loadPeerSavedGifts,\n    resetGiftProfileFilter,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => {\n    const arr: TabProps[] = [];\n    if (isSavedMessages && !isSavedDialog) {\n      arr.push({ type: 'dialogs', key: 'ProfileTabSavedDialogs' });\n    }\n\n    if (hasStoriesTab) {\n      arr.push({ type: 'stories', key: 'ProfileTabStories' });\n    }\n\n    if (hasStoriesTab && isSavedMessages) {\n      arr.push({ type: 'storiesArchive', key: 'ProfileTabStoriesArchive' });\n    }\n\n    if (hasGiftsTab) {\n      arr.push({ type: 'gifts', key: 'ProfileTabGifts' });\n    }\n\n    if (hasMembersTab) {\n      arr.push({ type: 'members', key: isChannel ? 'ProfileTabSubscribers' : 'ProfileTabMembers' });\n    }\n\n    if (hasPreviewMediaTab) {\n      arr.push({ type: 'previewMedia', key: 'ProfileTabBotPreview' });\n    }\n\n    arr.push(...TABS);\n\n    // Voice messages filter currently does not work in forum topics. Return it when it's fixed on the server side.\n    if (!isTopicInfo) {\n      arr.push({ type: 'voice', key: 'ProfileTabVoice' });\n    }\n\n    if (hasCommonChatsTab) {\n      arr.push({ type: 'commonChats', key: 'ProfileTabSharedGroups' });\n    }\n\n    if (isChannel && similarChannels?.length) {\n      arr.push({ type: 'similarChannels', key: 'ProfileTabSimilarChannels' });\n    }\n\n    if (isBot && similarBots?.length) {\n      arr.push({ type: 'similarBots', key: 'ProfileTabSimilarBots' });\n    }\n\n    return arr.map((tab) => ({\n      type: tab.type,\n      title: lang(tab.key),\n    }));\n  }, [\n    isSavedMessages, isSavedDialog, hasStoriesTab, hasGiftsTab, hasMembersTab, hasPreviewMediaTab, isTopicInfo,\n    hasCommonChatsTab, isChannel, isBot, similarChannels?.length, similarBots?.length, lang,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  useEffect(() => {\n    if (isBot && !similarBots && isSynced) {\n      loadBotRecommendations({ userId: chatId });\n    }\n  }, [chatId, isBot, similarBots, isSynced]);\n\n  const giftIds = useMemo(() => {\n    return gifts?.map(({ date, gift, fromId }) => `${date}-${fromId}-${gift.id}`);\n  }, [gifts]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadGifts = useCallback(() => {\n    loadPeerSavedGifts({ peerId: chatId });\n  }, [chatId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n    similarBots,\n  });\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n      || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    resetGiftProfileFilter({ peerId: chatId });\n  });\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: oldLang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className=\"nothing-found-gifts\">\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className=\"description\">\n          {lang('GiftSearchEmpty')}\n        </div>\n        <Link\n          className=\"date\"\n          onClick={handleResetGiftsFilter}\n        >\n          {lang('GiftSearchReset')}\n        </Link>\n      </div>\n    );\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if ((!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div\n          className=\"content empty-list\"\n        >\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    const isViewportIdsEmpty = viewportIds && !viewportIds?.length;\n\n    if (isViewportIdsEmpty && resultType === 'gifts') {\n      return renderNothingFoundGiftsWithFilter();\n    }\n\n    if (isViewportIdsEmpty) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = oldLang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = oldLang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = oldLang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = oldLang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = oldLang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={oldLang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => {\n            const message = messagesById[id];\n            if (!message) return undefined;\n            const media = messagesById[id] && getMessageDownloadableMedia(message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={messagesById[id]}\n                senderTitle={getSenderName(oldLang, messagesById[id], chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={messagesById[id].date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !messagesById[id].isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {oldLang('UnlockSimilar')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(oldLang('MoreSimilarText', limitSimilarPeers), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'similarBots' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((userId, i) => (\n              <ListItem\n                key={userId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarBots!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: userId })}\n              >\n                {isUserId(userId) ? (\n                  <PrivateChatInfo\n                    userId={userId}\n                    avatarSize=\"medium\"\n                  />\n                ) : (\n                  <GroupChatInfo\n                    chatId={userId}\n                    avatarSize=\"medium\"\n                  />\n                )}\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-bots\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockMoreSimilarBots')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarBotsDescription', { count: limitSimilarPeers }, {\n                    withNodes: true,\n                    withMarkdown: true,\n                    pluralValue: limitSimilarPeers,\n                  }))}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (gifts?.map((gift) => (\n            <SavedGift\n              peerId={chatId}\n              key={`${gift.date}-${gift.fromId}-${gift.gift.id}`}\n              gift={gift}\n              observeIntersection={observeIntersectionForMedia}\n            />\n          )))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const shouldUseTransitionForContent = resultType === 'gifts';\n  const contentTransitionKey = giftsTransitionKey;\n\n  function renderContentWithTransition() {\n    return (\n      <Transition\n        className={`${resultType}-list`}\n        activeKey={contentTransitionKey}\n        name=\"fade\"\n      >\n        {renderContent()}\n      </Transition>\n    );\n  }\n\n  const activeListSelector = `.shared-media-transition > .Transition_slide-active.${resultType}-list`;\n  const itemSelector = !shouldUseTransitionForContent\n    ? `${activeListSelector} > .scroll-item`\n    : `${activeListSelector} > .Transition_slide-active > .content > .scroll-item`;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={itemSelector}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={oldLang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {shouldUseTransitionForContent ? renderContentWithTransition() : renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          className={buildClassName(!isActive && 'hidden')}\n          isShown={canRenderContent}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={oldLang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const isBot = user && isUserBot(user);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const { similarBotsIds } = selectSimilarBotsIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(peerFullInfo?.starGiftCount) && !isSavedDialog;\n    const peerGifts = selectTabState(global).savedGifts.giftsByPeerId[chatId];\n    const giftsTransitionKey = selectTabState(global).savedGifts.transitionKey || 0;\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      isBot,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: peerGifts?.gifts,\n      giftsTransitionKey,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      similarBots: similarBotsIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarPeers: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\n// Sometimes px values are rounded\nconst ROUNDING_COMPENSATION_PX = 1;\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight + ROUNDING_COMPENSATION_PX;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport type { GiftProfileFilterOptions, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectCanUseGiftProfileAdminFilter,\n  selectCanUseGiftProfileFilter,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  giftProfileFilter: GiftProfileFilterOptions;\n  canUseGiftFilter?: boolean;\n  canUseGiftAdminFilter?:boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  GiftList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n  giftProfileFilter,\n  canUseGiftFilter,\n  canUseGiftAdminFilter,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n    updateGiftProfileFilter,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const {\n    sortType: giftsSortType,\n    shouldIncludeUnlimited: shouldIncludeUnlimitedGifts,\n    shouldIncludeLimited: shouldIncludeLimitedGifts,\n    shouldIncludeUnique: shouldIncludeUniqueGifts,\n    shouldIncludeDisplayed: shouldIncludeDisplayedGifts,\n    shouldIncludeHidden: shouldIncludeHiddenGifts,\n  } = giftProfileFilter;\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.GiftList ? (\n      HeaderContent.GiftList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return oldLang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return oldLang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return oldLang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return oldLang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return oldLang('GroupInfo.Title');\n  }\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{oldLang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{oldLang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{oldLang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{oldLang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{oldLang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{oldLang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{oldLang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{oldLang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{oldLang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{oldLang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{oldLang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{oldLang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{oldLang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? oldLang('EditLink') : oldLang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{oldLang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={oldLang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <Icon name=\"delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={oldLang('DeleteLink')}\n                    text={oldLang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={oldLang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{oldLang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={oldLang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={oldLang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{oldLang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{oldLang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{oldLang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{oldLang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{oldLang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{oldLang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{oldLang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{oldLang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{oldLang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{oldLang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{oldLang('EditTopic')}</h3>;\n      case HeaderContent.GiftList:\n        return (\n          <>\n            <h3 className=\"title\">{lang('ProfileTabGifts')}</h3>\n            {canUseGiftFilter && chatId && (\n              <section className=\"tools\">\n                <DropdownMenu\n                  trigger={PrimaryLinkMenuButton}\n                  positionX=\"right\"\n                  autoClose={false}\n                >\n                  <MenuItem\n                    icon={giftsSortType === 'byDate' ? 'cash-circle' : 'calendar-filter'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { sortType: giftsSortType === 'byDate' ? 'byValue' : 'byDate' } },\n                    )}\n                  >\n                    {lang(giftsSortType === 'byDate' ? 'GiftSortByValue' : 'GiftSortByDate')}\n                  </MenuItem>\n\n                  <MenuSeparator />\n\n                  <MenuItem\n                    icon={shouldIncludeUnlimitedGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnlimited: !shouldIncludeUnlimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnlimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeLimitedGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeLimited: !shouldIncludeLimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterLimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUniqueGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnique: !shouldIncludeUniqueGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnique')}\n                  </MenuItem>\n\n                  {canUseGiftAdminFilter && (\n                    <>\n                      <MenuSeparator />\n                      <MenuItem\n                        icon={shouldIncludeDisplayedGifts ? 'check' : 'placeholder'}\n                        // eslint-disable-next-line react/jsx-no-bind\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeDisplayed: !shouldIncludeDisplayedGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterDisplayed')}\n                      </MenuItem>\n\n                      <MenuItem\n                        icon={shouldIncludeHiddenGifts ? 'check' : 'placeholder'}\n                        // eslint-disable-next-line react/jsx-no-bind\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeHidden: !shouldIncludeHiddenGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterHidden')}\n                      </MenuItem>\n                    </>\n                  )}\n                </DropdownMenu>\n              </section>\n            )}\n          </>\n        );\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <Icon name=\"add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <Icon name=\"stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.GiftList\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    const giftProfileFilter = tabState.savedGifts.filter;\n    const canUseGiftFilter = chatId ? selectCanUseGiftProfileFilter(global, chatId) : false;\n    const canUseGiftAdminFilter = chatId ? selectCanUseGiftProfileAdminFilter(global, chatId) : false;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n      giftProfileFilter,\n      canUseGiftFilter,\n      canUseGiftAdminFilter,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>{lang(boost.isFromGiveaway\n            ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>{\n                          isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                            : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                        }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>{lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang(\n                isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n              )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics, StatisticsGraph } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, openMonetizationVerificationModal, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ peerId: chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current = [];\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index], {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph as StatisticsGraph,\n        });\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n    && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? <span className={styles.decimalPart}>.{decimalTonPart}</span> : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ ${integerUsdPart}\n          {decimalUsdPart ? <span className={styles.decimalUsdPart}>.{decimalUsdPart}</span> : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openMonetizationVerificationModal({\n        chatId,\n      });\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          size=\"smaller\"\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n    } = global;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig?.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            isActive={isOpen && isActive}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (!chatId || !messageId) return;\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import React, { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ConfettiStyle } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import React, {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { SVG_NAMESPACE } from '../../../config';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.svg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    addSvgDefinition(\n      <filter x=\"0\" y=\"0\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feImage href={waveRipple} result=\"waveImage\" />\n        <feDisplacementMap\n          in=\"SourceGraphic\"\n          in2=\"waveImage\"\n          scale={FILTER_SCALE}\n          xChannelSelector=\"R\"\n          yChannelSelector=\"B\"\n        />\n      </filter>,\n      FILTER_ID,\n    );\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import '../../global/actions/all';\n\nimport React, {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiLimitTypeWithModal, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/windowEnvironment';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AudioPlayer from '../middle/panes/AudioPlayer';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadStarGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    loadUserCollectibleStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n    loadPasswordInfo,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadAttachBots();\n      loadContactList();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadFeaturedEmojiStickers();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadTimezones();\n      loadQuickReplies();\n      loadStarStatus();\n      loadPremiumGifts();\n      loadStarGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadGenericEmojiEffects();\n      loadSavedReactionTags();\n      loadAuthorizations();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n      loadPasswordInfo();\n      loadUserCollectibleStatuses();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n\n      loadAttachBots();\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      <AudioPlayer noUi />\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <SnapEffectContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          wasTimeFormatSetManually,\n        },\n      },\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","_ref","isOwn","peerId","currentUserId","forEach","reaction","type","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","lastVideoProcessingNotificationTime","updateReactions","actions","chat","isOutgoing","areDeepEqual","localPaidReaction","find","r","localAmount","localIsPrivate","isPrivate","localPeerId","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","arguments","undefined","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","_ref8","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","_ref9","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","action","deletePeerPhoto","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","setGlobal","isAnimatingAsSnap","selectCanAnimateSnapEffect","setTimeout","getGlobal","stillDeletedIds","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","poll","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","updatePoll","reportDeliveryUntilDate","getServerTime","reportMessageDelivery","isNotJoined","selectIsChatListed","loadTopChats","lastMessage","addMessages","_ref2","currentChatId","getMessageText","text","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","updatePeerFullInfo","hasScheduledMessages","clearMessageTranslation","keys","selectChatScheduledMessages","map","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","newScheduledMessageId","_ref3","showNotification","key","title","messageListType","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","_ref4","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","_ref5","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","newIds","hadVideoProcessing","some","isVideoProcessingPending","processedVideoId","_ref6","actionText","payload","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","senderId","deleteParticipantHistory","channelId","pollId","pollUpdate","options","updatePollVote","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","_ref7","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","_len2","Array","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","result","limit","count","localMessages","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","currentMessageKey","progressCallback","attachment","progress","set","updateUploadByMessageKey","IS_IOS","rafPromise","delete","fetchUnreadMentions","addUnreadMentions","shouldForceRender","onError","isRestricted","viewportIds","Boolean","_len","_key","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","scheduledAt","contentToBeScheduled","selectDraft","isForwarding","forwardMessages","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","sendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","oldTranslate","join","selectEditingMessage","setEditingId","cancelApiProgress","apiUpdate","currentDraft","effectId","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","isSilent","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","peer","selectPeer","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","description","option","response","MESSAGE_ID_REQUIRED_ERROR","closeReportModal","oldSections","reportModal","sections","selectedOption","o","newSection","subtitle","subject","isOptional","connectionState","isUserBot","participantId","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","selectCurrentChat","then","fetchUnreadReactions","webPagePreview","selectPollFromMessage","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","forwardableRealMessages","selectCanForwardMessage","messageBatches","config","maxForwardedCount","splitMessagesForForwarding","batch","isShareMessageModalShown","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","isForPaidReactions","sendPaidReactionsAsPeerIds","isApiPeerUser","selectIsChatBotNotStarted","updateSponsoredMessage","selectSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","reportAdModal","enabled","updateUserFullInfo","areAdsEnabled","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","urlWithProtocol","ensureProtocol","parsedUrl","URL","isMixedScript","isMixedScriptUrl","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","appConfig","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","toString","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","clearDraft","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","shouldIncrement","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","isChatSuperGroup","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","MESSAGES_TO_REPORT_DELIVERY","reportDeliveryTimeout","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","voice","currentIds","cId","clear","botId","webAppKey","bot","preparedMessageModal","sendWebAppEvent","event","eventType","eventData","supportedFilters","peerTypes","sharePreparedMessageModal","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","collectibleEmojiStatuses","statuses","documentIds","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","shouldIgnoreCache","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","localMessage","globalSearch","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","updateGlobalSearch","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","context","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","isApiPeerChat","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","initFolderManager","listType","whenFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","_ref10","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","_ref11","threads","updateThread","_ref12","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","statusesById","topPeers","lastRequestedAt","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPreload","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","referrerWebAppKey","customEmojiIconId","isCloseFriend","customEmojiId","duration","suggestedStatusModal","currentPeerIds","botVerificationShownPeerIds","newPeerIds","BOT_VERIFICATION_PEERS_LIMIT","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webAppUpdate","_len3","_key3","currentTabState","openedWebApps","webApps","originalWebApp","updatedValue","updatedWebAppKey","getWebAppKey","addWebAppToOpenList","webApp","makeActive","openModalIfNotOpen","_len5","_key5","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","activeWebAppKey","isMoreAppsTabActive","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","_len7","_key7","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","k","isRemovedAppActive","openedWebAppsKeys","openedWebAppsCount","hasOpenedWebApps","_len9","_key9","replaceIsWebAppModalOpen","value","_len12","_ref13","_key12","runDebouncedForSearch","botFatherId","gameePopups","checkIfOpenOrActivate","requestUrl","webAppName","webAppForCheck","isWepAppOpened","_len4","_key4","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","copyTextToClipboard","copyText","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","newResults","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","appName","isFromBotMenu","isFullScreen","getIsWebAppsFullscreenSupported","changeWebAppModalState","state","mode","shouldMarkBotTrusted","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","byKey","shouldSkipWebAppCloseConfirmation","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","name","about","langCode","bio","isBotAccessEmojiGranted","isBotCanManageEmojiStatus","isAccessGranted","updateBotAppPermissions","geolocation","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","errorKey","isSuccess","password","email","recoveryEmail","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","payInputStarInvoice","inputInvoice","price","balance","stars","amount","openStarsBalanceModal","requestInputInvoice","getRequestInputInvoice","isPaymentFormLoading","form","sendStarPaymentForm","directInfo","formId","requestInfo","saveInfo","selectPaymentInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","starsPayment","gift","shouldHideName","shouldUpgrade","giftId","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","descriptionKey","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","selectStarsPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","loadStarStatus","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","forUserId","giftModal","forPeerId","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","slug","giftCodeModal","info","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","currency","openBoostStatistics","shouldKeepOriginalDetails","upgradeStars","requestSavedGift","getRequestInputSavedStarGift","isWaitingForStarGiftUpgrade","closeGiftUpgradeModal","closeGiftInfoModal","inputSavedGift","recipientId","transferStars","isWaitingForStarGiftTransfer","closeGiftTransferModal","toPeer","openGiftInfoModal","giftWithdrawModal","inputGift","closeGiftWithdrawModal","currentStatus","needsTopupOptions","topupOptions","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","isInbound","isOutbound","updateStarsBalance","idsByCategoryName","stock","limited","allStarGiftIds","allStarGifts","limitedStarGiftIds","isLimited","stockedStarGiftIds","availabilityRemains","availabilityTotal","starsCategory","starGifts","idsByCategory","shouldRefresh","withTransition","currentGifts","selectPeerSavedGifts","localNextOffset","fetchingFilter","selectGiftProfileFilter","currentFilter","newGifts","savedGifts","transitionKey","replacePeerSavedGifts","updateStarsSubscriptionLoading","isCancelled","subscriptionId","requestInputGift","oldGifts","giftsByPeerId","g","areInputSavedGiftsEqual","isUnsaved","loadPeerSavedGifts","samples","giftUpgradeModal","sampleAttributes","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","stopActiveReaction","loadSavedReactionTags","shouldIgnoreDefaultPrivacy","defaultPrivacy","paidReactionPrivacy","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateVerifyMonetizationModal","closeMonetizationVerificationModal","stories","hasNext","stateHash","isFirstRequest","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","profileIds","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","archiveIds","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","botsPrivacy","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","_len6","_key6","removeActiveWebAppFromOpenList","shouldSkipConfirmation","shouldShowConfirmation","_len10","_key10","hasOpenedMoreThanOneWebApps","openWebAppsCloseConfirmationModal","_len8","_key8","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","selectActiveWebApp","newActiveWebApp","newActiveWebAppKey","clearOpenedWebApps","_len11","_key11","replaceWebAppModalState","miniAppsCachedPosition","size","miniAppsCachedSize","activeWebApp","trustedBotIds","newTrustedBotIds","callbackPayload","selectWebApp","newPlannedEvents","plannedEvents","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","emojiStatusAccessModal","locationAccessModal","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getPeerTitle","forwardInfo","hiddenUserName","statefulContent","getMessageStatefulContent","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","onMessageReady","openMediaFromTimestamp","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","forwardableMessageIds","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","getMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","isSchedule","deleteMessageModal","aboutAdsModal","currentContent","fetchingStatus","GlobalSearchContent","BotApps","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","startX","startY","IS_WAVE_TRANSFORM_SUPPORTED","currentLastTime","wave","lastWaveTime","ANIMATION_WAVE_MIN_INTERVAL","shouldCompress","shouldSendGrouped","isInvertedMedia","webPageMediaSize","attachmentSettings","shouldPlayEffectInComposer","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","isStrict","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","prefix","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","starsBalanceModal","processOriginStarsPayment","originData","clearPayment","prevFilter","updatedFilter","shouldIncludeUnlimited","shouldIncludeLimited","shouldIncludeUnique","shouldIncludeDisplayed","shouldIncludeHidden","DEFAULT_GIFT_PROFILE_FILTER_OPTIONS","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","selectReplyMessage","messageMedia","getTimestampableMedia","maxMessageDuration","openMediaViewer","MediaViewerOrigin","Inline","openAudioPlayer","AudioOrigin","replyMessageMedia","maxReplyMessageDuration","currentChatPlaybacks","playbackByChatId","noLockOnUnload","addTabStateResetterAction","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","originStarsPayment","originGift","topup","sendPaidReaction","sendStarGift","isGiftRecipientPickerOpen","starsGiftingPickerModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","starBalance","balanceNeeded","clearStarPayment","icon","getStarsTransactionFromGift","subscription","starsSubscriptionModal","starGift","uniqueGift","giftReceiverId","savedId","fromId","starsToConvert","isNameHidden","isSaved","isConverted","upgradeMsgId","canUpgrade","alreadyPaidUpgradeStars","canExportAt","giftInfoModal","giftStatusInfoModal","giftTransferModal","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","dismissNotification","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","monetizationVerificationModal","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","addChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","loadFullUser","targetUserFullInfo","botInfo","menuButton","threadInfos","polls","addUsers","addChats","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","closeWebApp","processPremiumFloodWait","private","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","actionStarGift","openUniqueGiftBySlug","receiver","variables","getTranslationFn","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","totalAmount","giftModalState","formatCurrencyAsString","subscriptionPricing","subscriptionPeriod","starsModalState","isCompleted","starGiftModalState","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Icon","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","useLang","ref","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","isStoryRibbonClosing","useDerivedState","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","renderTextWithEntities","noCustomEmojiPlayback","noTitleAnimations","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","placeholderRef","shouldRenderPlaceholder","noMountTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","Transition","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","Spinner","animationLevel","attachBots","selectTheme","canInstall","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSettingOption","updatePerformanceSettings","openChatByUsername","oldLang","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","collectibleStatuses","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","collectibleStatus","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","withSparkles","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","areContactsVisible","LeftColumnContent","Contacts","hasMenu","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchRelevant","GlobalSearch","isSearchFocused","searchInputPlaceholder","versionString","APP_REVISION","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","withStoryToggler","searchContent","PeerChip","canClose","isCloseNonDestructive","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","LeftSideMenuItems","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","transitionClassNames","updateButtonClassNames","useShowTransitionDeprecated","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","fluid","badge","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsAllowedContacts","PrivacyGiftsDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","usePrevious","renderContent","currentScreen","onScreenSelect","isChannel","LeftMain","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewer","ReactionPicker","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","viewportPinnedIds","lastFocusedId","clampIndex","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","ChatLanguageModal","EmojiInteractionAnimation","ariaLabelLang","onReadAll","isContextMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","onContextMenu","hasActiveMiddleSearch","shouldShowCount","mentionsCount","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","container","element","margin","ScrollDownButton","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","currentAlbum","dateGroups","originalDate","datetime","getDayStartAt","senderGroups","currentDateGroup","currentSenderGroup","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastMessageInSenderGroup","nextMessageDayStartsAt","newDateGroup","postAuthorTitle","inlineButtons","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","chatBot","isLoadingBotInfo","chatBotFullInfo","isInMessageList","botInfoPhotoUrl","useMedia","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","height","style","buildStyle","src","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","Skeleton","forceAspectRatio","renderText","INTERSECTION_THROTTLE_FOR_MEDIA","ownProps","withAvatar","isSystemBotChat","isSystemBot","isAnonymousForwards","isAnonymousForwardsChat","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","selectForwardedSender","isRepliesChat","children","messageSender","avatarPeer","handleAvatarClick","hiddenName","Avatar","renderAvatar","SponsoredMessageContextMenuContainer","activeDownloads","selectActiveDownloads","downloadableMedia","isDownloading","getIsDownloading","canAutoLoadMedia","selectCanAutoLoadMedia","canAutoPlayMedia","selectCanAutoPlayMedia","observeIntersectionForLoading","observeIntersectionForPlaying","viewSponsoredMessage","hideSponsoredMessages","clickSponsoredMessage","openAboutAdsModal","contentRef","shouldObserve","observe","observeIntersection","useIntersectionObserver","rootRef","debounceMs","threshold","contextMenuAnchor","handleBeforeContextMenu","target","isIntersecting","handleHideSponsoredMessage","isGif","hasMedia","handleClick","handleOpenMedia","SponsoredMessage","handleOpenAboutAdsModal","sizeCalculations","calculatedWidth","contentWidth","calculateMediaDimensions","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","noMediaCorners","onMouseDown","preventMessageInputBlur","PeerColorWrapper","peerColor","Photo","canAutoLoad","noAvatars","forcedWidth","Video","canAutoPlay","renderMediaContent","isRecommended","BadgeButton","isRectangular","MessageAppendix","canReport","anchor","triggerRef","canShowAds","messageGroups","getContainerHeight","isViewportNewest","isComments","isEmptyThread","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isReady","hasLinkedChat","shouldRenderBotInfo","noAppearanceAnimation","onScrollDownToggle","onNotchToggle","onIntersectPinnedMessage","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","getIsReady","useDerivedSignal","areDatesClickable","observeIntersectionForReading","markMentionsRead","animateUnreadReaction","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","viewportPinnedIdsToRemove","scheduledToUpdateViews","entry","dataset","shouldUpdateViews","albumMainId","hasUnreadReaction","useBackgroundMode","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","fabTrigger","offsetHeight","scrollHeight","scrollTop","fabOffsetTop","offsetTop","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","useOnIntersect","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","requestMeasure","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","usePreviousDeprecated","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","isLastInList","ActionMessage","observeIntersectionForBottom","appearanceOrder","isJustAdded","getIsMessageListReady","currentDocumentGroupId","senderGroupElements","messageIndex","album","isOwnMessage","isMessageAlbum","getMessageHtmlId","documentGroupId","nextDocumentGroupId","isTopicTopMessage","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","originalId","getMessageOriginalId","noComments","Message","withSenderName","noReplies","lastMessageOrAlbum","firstMessageOrAlbum","firstMessage","SenderGroupContainer","calculateSenderGroups","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","MessageListBotInfo","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","TopicIcon","renderTopic","patternColor","themes","userName","handleOpenPremiumModal","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","Unlock","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","selectIsInSelectMode","linkedChatId","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","isChatProtected","selectIsChatProtected","withBottomShift","withDefaultBg","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","loadFactChecks","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","inviterId","isViaRequest","orderRule","orderBy","useInterval","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","classList","contains","requestMutation","stuckDateEl","allElements","containerTop","computedStyle","getComputedStyle","headerActionsHeight","parseInt","getPropertyValue","top","findStuckDate","currentStuck","remove","useStickyDates","handleScroll","focusedMessage","shouldCancelWaiting","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","handleResize","contentRect","useResizeObserver","currentNormalHeight","normalHeight","containerHeight","prevContainerHeight","useContainerHeight","firstElementChild","clientHeight","rememberScrollPositionRef","preservedItemElements","getBoundingClientRect","forceMeasure","useLayoutEffectWithPrevDeps","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","forceDuration","isResized","newScrollTop","newAnchorTop","getOffsetToContainer","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","beginHeavyAnimation","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","PremiumRequiredMessage","ContactGreeting","NoMessages","MessageListContent","backgroundColor","MessageSelectToolbar","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","isFullWidth","onPaneStateChange","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","renderingMessage","useCurrentOrPrev","audio","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaHash","getMessageMediaHash","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","setCurrentTime","useAudioPlayer","makeTrackId","getMediaDuration","shouldForceOpen","useHeaderPane","onStateChange","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","volumeIcon","renderAudio","renderVoice","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","drawRect","radius","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","useLayoutEffect","firstChild","currentElement","transform","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","getLoadingPinnedId","getCurrentPinnedIndex","shouldHide","onFocusPinnedMessage","clickBotInlineButton","pinMessage","loadPinnedMessages","currentPinnedIndex","isArray","pinnedMessage","pinnedMessagesCount","pinnedMessageNumber","topMessageTitle","getMessageVideo","isVideoThumbnail","previewPhotoSizes","mediaThumbnail","useThumbnail","mediaBlobUrl","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","renderingPinnedMessage","useEnsureMessage","noOpenTransition","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","handleAllPinnedClick","handleMessageClick","nextMessageId","cycleRestrict","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleMouseDown","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","PinnedMessageNavigation","thumbDataUri","isFullVideo","asSpoiler","getPictogramDimensions","srcUrl","shouldRenderVideo","draggable","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","pluralValue","MessageSummary","truncateLength","noEmoji","emojiSize","shouldStopPropagation","renderKeyboardButtonText","audioMessage","emojiStatusSticker","emojiStatusSlug","isRightColumnShown","currentTransitionKey","openThreadWithInfo","openPreviousChat","toggleLeftColumn","openStickerSet","isBackButtonActive","isTablet","useWindowSize","isDesktop","isLeftColumnHideable","shouldShowCloseButton","componentRef","handleOpenSearch","handleOpenChat","closest","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","prevTransitionKey","isAudioPlayerActive","isAudioPlayerRendering","isPinnedMessagesFullWidth","renderBackButton","asClose","withUnreadCounter","UnreadCounter","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","HeaderPinnedMessage","AudioPlayer","HeaderActions","canExpandActions","sponsoredMessage","renderingSponsoredMessage","withResizeObserver","handleAboutClick","getApiPeerColorClass","selectPeerFullInfo","botVerification","wasShown","markBotVerificationInfoShown","markAsShowed","iconId","isAutoArchived","canReportSpam","canAddContact","canBlockContact","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPane","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","renderingPeer","isBasicGroup","isChatBasicGroup","renderingCanAddContact","renderingCanBlockContact","renderingCanReportSpam","renderingIsAutoArchived","handleAddContact","handleConfirmBlock","handleCloseReportPane","handleChatReportSpam","isRendering","isText","confirmIsDestructive","Checkbox","onCheck","FALLBACK_PANE_STATE","isMiddleSearchOpen","isAudioPlayerRendered","getAudioPlayerState","setAudioPlayerState","getPinnedState","setPinnedState","getGroupCallState","setGroupCallState","getChatReportState","setChatReportState","getBotAdState","setBotAdState","getBotVerificationState","setBotVerificationState","isFirstRenderRef","useEffectOnce","audioPlayerState","botVerificationState","pinnedState","stateArray","isFirstRender","totalHeight","middleColumn","applyAnimationState","setExtraStyles","GroupCallTopPane","ChatReportPane","BotVerificationPane","BotAdPane","Link","isPrimary","ReactorListModal","MiddleSearch","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isMainThread","canSubscribe","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","selectIsUserBlocked","canRestartBot","canStartBot","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","isClosed","canShowOpenChatButton","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","dropAreaState","setDropAreaState","DropAreaState","None","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","pinnedLength","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","propertyName","currentTarget","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","handleMouseMove","newWidth","clientX","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","IS_SAFARI","item","every","kind","isImage","QuickFile","Document","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","useFluidBackgroundFilter","isMessagingDisabled","withMessageListBottomShift","onDoubleClick","onDragEnter","MiddleHeaderPanes","MiddleHeader","isBlockingAnimation","onStop","MessageList","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","IS_TRANSLATION_SUPPORTED","FloatingActionButtons","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","starsTransactionModal","StarsTransactionModal","ChatInviteModal","PaidReactionModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","SuggestedStatusModal","EmojiStatusAccessModal","LocationAccessModal","AboutAdsModal","GiftUpgradeModal","VerificationMonetizationModal","GiftWithdrawModal","GiftStatusInfoModal","PreparedMessageModal","SharePreparedMessageModal","GiftTransferModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","usersById","filterPeersByQuery","sortChatIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","GiftList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","fromPeer","shouldPlay","play","handleOnIntersect","CUSTOM_PEER_HIDDEN","getStickerFromGift","radialPatternBackdrop","backdrop","pattern","getGiftAttributes","backdropColors","centerColor","edgeColor","RadialPatternBackground","backgroundColors","patternIcon","totalIssued","getTotalGiftAvailability","AnimatedIconFromSticker","noLoop","nonInteractive","GiftRibbon","idPrefix","isProtected","useIsIntersecting","getMessageMediaThumbDataUri","useMediaTransitionDeprecated","decoding","stopEvent","formatMediaDuration","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","imageHash","getStoryMediaHash","thumbUrl","dataUri","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","TABS","mediaSearchType","isTopicInfo","chatsById","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","similarBotsIds","selectSimilarBotsIds","hasCommonChatsTab","commonChatsCount","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","pinnedStoryIds","storyByIds","archiveStoryIds","hasGiftsTab","starGiftCount","peerGifts","giftsTransitionKey","shouldWarnAboutSvg","similarChannels","similarBots","limitSimilarPeers","commonChatIds","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","loadCommonChats","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadBotRecommendations","loadPreviewMedias","resetGiftProfileFilter","deletingUserId","setDeletingUserId","profileId","isSavedMessages","tab","initialTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","setActiveTab","giftIds","renderingActiveTab","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","resultType","noProfileInfo","searchMessages","loadStories","loadMoreGifts","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","tabsEl","prevProfileState","Profile","tabListEl","maxDistance","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","newHeight","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","PreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","prevHasMemberTabs","newActiveTab","handleResetGiftsFilter","renderingDelay","SLIDE_TRANSITION_DURATION","canRenderContent","noSpinner","forceRenderHiddenMembers","NothingFound","isViewportIdsEmpty","SearchingDuck","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","Audio","onPlay","getSenderName","ListItem","memberId","adminMember","forceShowSelf","avatarSize","withNodes","withMarkdown","SavedGift","shouldUseTransitionForContent","contentTransitionKey","activeListSelector","itemSelector","InfiniteScroll","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","isInsideTopic","canEditTopic","getCanManageTopic","canEditBot","getCanAddContact","canManage","selectCanManage","isEditingInvite","canViewStatistics","giftProfileFilter","canUseGiftFilter","selectCanUseGiftProfileFilter","canUseGiftAdminFilter","selectCanUseGiftProfileAdminFilter","isColumnOpen","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","updateGiftProfileFilter","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","sortType","giftsSortType","shouldIncludeUnlimitedGifts","shouldIncludeLimitedGifts","shouldIncludeUniqueGifts","shouldIncludeDisplayedGifts","shouldIncludeHiddenGifts","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","Reactions","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","renderingContentKey","PrimaryLinkMenuButton","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","MenuSeparator","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","isCustomPeer","avatarIcon","peerColorId","CUSTOM_PEER_TO_BE_DISTRIBUTED","titleKey","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","isLoaded","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","total","multiplier","toLoadCount","renderBoostIcon","quantity","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","formatDateAtTime","expires","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","root","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","months","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","openMonetizationVerificationModal","loadedCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","child","hidden","graph","create","topText","linkText","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","integerTonPart","decimalTonPart","toFixed","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","isOnlyConfirm","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","prevChatId","prevThreadId","RightHeader","StoryViewer","AttachBotRecipientPicker","BotTrustModal","DeleteFolderDialog","Dialogs","processedHashes","downloadedHashes","cancelMediaHashDownloads","handleMediaDownloaded","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","PremiumLimitReachedModal","GiveawayModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","CONFETTI_COLORS","STAR_PATH","Path2D","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","w","h","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","diff","newPos","newVelocity","newFlicker","abs","sin","newRotation","PI","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","fill","restore","beginPath","ellipse","hideTimeout","prevConfettiTime","containerStyle","containerWidth","leftSide","randomX","FILTER_ID","waveInfo","waves","setWaves","addWave","newWave","prevWaves","overlaySize","startTime","waveWidth","addSvgDefinition","xmlns","SVG_NAMESPACE","waveRipple","in","in2","xChannelSelector","yChannelSelector","removeSvgDefinition","onAnimationEnd","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","game","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadUserCollectibleStatuses","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","endHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleFocus","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","setAttribute","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","ModalContainer","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","WaveContainer","SnapEffectContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}