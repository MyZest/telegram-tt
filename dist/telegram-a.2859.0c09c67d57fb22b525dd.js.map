{"version":3,"file":"telegram-a.2859.0c09c67d57fb22b525dd.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import type {\n  ApiChat, ApiChatFolder, ApiChatlistExportedInvite,\n  ApiChatMember, ApiError, ApiMissingInvitedUser,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport {\n  ChatCreationProgress,\n  type ChatListType,\n  ManagementProgress,\n  NewChatMembersProgress,\n  SettingsScreens,\n  type ThreadId,\n} from '../../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  CHAT_LIST_LOAD_SLICE,\n  DEBUG,\n  GLOBAL_SUGGESTED_CHANNELS_ID,\n  RE_TG_LINK,\n  SAVED_FOLDER_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TME_WEB_DOMAINS,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n} from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatShareText, processDeepLink } from '../../../util/deeplink';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omit, pick, unique,\n} from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addChatMembers,\n  addChats,\n  addMessages,\n  addSimilarBots,\n  addUsers,\n  addUserStatuses,\n  deleteChatMessages,\n  deletePeerPhoto,\n  deleteTopic,\n  leaveChat,\n  removeChatFromChatLists,\n  replaceChatFullInfo,\n  replaceChatListIds,\n  replaceChatListLoadingParameters,\n  replaceMessages,\n  replaceSimilarChannels,\n  replaceThreadParam,\n  replaceUserStatuses,\n  toggleSimilarChannels,\n  updateChat,\n  updateChatFullInfo,\n  updateChatLastMessageId,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateChatsLastMessageId,\n  updateListedTopicIds,\n  updateManagementProgress,\n  updateMissingInvitedUsers,\n  updatePeerFullInfo,\n  updateThread,\n  updateThreadInfo,\n  updateTopic,\n  updateTopics,\n  updateUser,\n  updateUsers,\n} from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatByUsername,\n  selectChatFolder,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatListLoadingParameters,\n  selectChatListType,\n  selectChatMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsChatPinned,\n  selectIsChatWithSelf,\n  selectLastServiceNotification,\n  selectPeer,\n  selectSimilarChannelIds,\n  selectStickerSet,\n  selectSupportChat,\n  selectTabState,\n  selectThread,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectTopicsInfo,\n  selectUser,\n  selectUserByPhoneNumber,\n} from '../../selectors';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { selectCurrentLimit } from '../../selectors/limits';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst CHATLIST_LIMIT_ERROR_LIST = new Set([\n  'FILTERS_TOO_MUCH',\n  'CHATLISTS_TOO_MUCH',\n  'INVITES_TOO_MUCH',\n]);\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\nfunction abortChatRequests(chatId: string, threadId?: ThreadId) {\n  callApi('abortChatRequests', { chatId, threadId });\n}\n\nfunction abortChatRequestsForCurrentChat<T extends GlobalState>(\n  global: T, newChatId?: string, newThreadId?: ThreadId,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const currentChatId = currentMessageList?.chatId;\n  const currentThreadId = currentMessageList?.threadId;\n\n  if (currentChatId && (currentChatId !== newChatId || currentThreadId !== newThreadId)) {\n    const [isChatOpened, isThreadOpened] = Object.values(global.byTabId)\n      .reduce(([accHasChatOpened, accHasThreadOpened], { id: otherTabId }) => {\n        if (otherTabId === tabId || (accHasChatOpened && accHasThreadOpened)) {\n          return [accHasChatOpened, accHasThreadOpened];\n        }\n\n        const otherMessageList = selectCurrentMessageList(global, otherTabId);\n        const isSameChat = otherMessageList?.chatId === currentChatId;\n        const isSameThread = isSameChat && otherMessageList?.threadId === currentThreadId;\n\n        return [accHasChatOpened || isSameChat, accHasThreadOpened || isSameThread];\n      }, [currentChatId === newChatId, false]);\n\n    const shouldAbortChatRequests = !isChatOpened || !isThreadOpened;\n\n    if (shouldAbortChatRequests) {\n      abortChatRequests(currentChatId, isChatOpened ? currentThreadId : undefined);\n    }\n  }\n}\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, type, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  actions.processOpenChatOrThread({\n    chatId: id,\n    type,\n    threadId: MAIN_THREAD_ID,\n    noForumTopicPanel,\n    shouldReplaceHistory,\n    shouldReplaceLast,\n    tabId,\n  });\n\n  abortChatRequestsForCurrentChat(global, id, MAIN_THREAD_ID, tabId);\n\n  if (!id || id === TMP_CHAT_ID) {\n    return;\n  }\n\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  const isChatOnlySummary = !selectChatLastMessageId(global, id);\n\n  if (!chat) {\n    if (selectIsChatWithSelf(global, id)) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatOnlySummary && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n});\n\naddActionHandler('openSavedDialog', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId(), ...otherParams } = payload;\n\n  actions.openThread({\n    chatId: global.currentUserId!,\n    threadId: chatId,\n    tabId,\n    ...otherParams,\n  });\n});\n\naddActionHandler('openThread', async (global, actions, payload): Promise<void> => {\n  const {\n    type, isComments, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    focusMessageId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { chatId } = payload;\n  let threadId: ThreadId | undefined;\n  let loadingChatId: string;\n  let loadingThreadId: ThreadId;\n\n  if (!isComments) {\n    loadingChatId = payload.chatId;\n    threadId = payload.threadId;\n    loadingThreadId = threadId;\n\n    const originalChat = selectChat(global, loadingChatId);\n    if (threadId === MAIN_THREAD_ID) {\n      actions.openChat({\n        id: chatId,\n        type,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    } else if (originalChat?.isForum || (chatId && getIsSavedDialog(chatId, threadId, global.currentUserId))) {\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    }\n  } else {\n    const { originChannelId, originMessageId } = payload;\n\n    loadingChatId = originChannelId;\n    loadingThreadId = originMessageId;\n  }\n\n  const chat = selectChat(global, loadingChatId);\n  const threadInfo = selectThreadInfo(global, loadingChatId, loadingThreadId);\n  const thread = selectThread(global, loadingChatId, loadingThreadId);\n  if (!chat) return;\n\n  abortChatRequestsForCurrentChat(global, loadingChatId, loadingThreadId, tabId);\n\n  if (chatId\n    && threadInfo?.threadId\n    && (isComments || (thread?.listedIds?.length && thread.listedIds.includes(Number(threadInfo.threadId))))) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadInfo.threadId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n      tabId,\n    });\n    return;\n  }\n\n  let { loadingThread } = selectTabState(global, tabId);\n  if (loadingThread) {\n    abortChatRequests(loadingThread.loadingChatId, loadingThread.loadingMessageId);\n  }\n\n  global = updateTabState(global, {\n    loadingThread: {\n      loadingChatId,\n      loadingMessageId: Number(loadingThreadId),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const openPreviousChat = () => {\n    // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n    const currentGlobal = getGlobal();\n    if (isComments\n      || selectCurrentMessageList(currentGlobal, tabId)?.chatId !== loadingChatId\n      || selectCurrentMessageList(currentGlobal, tabId)?.threadId !== loadingThreadId) {\n      return;\n    }\n    actions.openPreviousChat({ tabId });\n  };\n\n  if (!isComments) {\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadId!,\n      tabId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n    });\n  }\n\n  const result = await callApi('fetchDiscussionMessage', {\n    chat: selectChat(global, loadingChatId)!,\n    messageId: Number(loadingThreadId),\n  });\n\n  global = getGlobal();\n  loadingThread = selectTabState(global, tabId).loadingThread;\n  if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n    openPreviousChat();\n    return;\n  }\n\n  if (!result) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n\n    actions.showNotification({\n      message: langProvider.oldTranslate(isComments ? 'ChannelPostDeleted' : 'lng_message_not_found'),\n      tabId,\n    });\n\n    openPreviousChat();\n    return;\n  }\n\n  threadId ??= result.threadId;\n  chatId ??= result.chatId;\n\n  if (!chatId) {\n    openPreviousChat();\n    return;\n  }\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  if (isComments) {\n    global = updateThreadInfo(global, loadingChatId, loadingThreadId, {\n      threadId,\n    });\n\n    global = updateThreadInfo(global, chatId, threadId, {\n      isCommentsInfo: false,\n      threadId,\n      chatId,\n      fromChannelId: loadingChatId,\n      fromMessageId: loadingThreadId,\n      ...(threadInfo\n        && pick(threadInfo, ['messagesCount', 'lastMessageId', 'lastReadInboxMessageId', 'recentReplierIds'])),\n    });\n  }\n  global = updateThread(global, chatId, threadId, {\n    firstMessageId: result.firstMessageId,\n  });\n  setGlobal(global);\n\n  if (focusMessageId) {\n    actions.focusMessage({\n      chatId,\n      threadId: threadId!,\n      messageId: focusMessageId,\n      tabId,\n    });\n  }\n\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    onError: () => {\n      global = getGlobal();\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.showNotification({\n        message: langProvider.oldTranslate('Group.ErrorAccessDenied'),\n        tabId,\n      });\n    },\n    onLoaded: () => {\n      global = getGlobal();\n      loadingThread = selectTabState(global, tabId).loadingThread;\n      if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n        return;\n      }\n\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId: threadId!,\n        tabId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n      });\n    },\n  });\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const { whenFirstBatchDone } = payload;\n  const listType = payload.listType;\n  let isCallbackFired = false;\n  let i = 0;\n\n  while (!global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    await loadChats(\n      listType,\n      true,\n    );\n\n    if (!isCallbackFired) {\n      await whenFirstBatchDone?.();\n      isCallbackFired = true;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, force, withPhotos,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const loadChat = async () => {\n    await loadFullChat(global, actions, chat);\n    if (withPhotos) {\n      actions.loadMoreProfilePhotos({ peerId: chatId, shouldInvalidateCache: true });\n    }\n  };\n\n  if (force) {\n    void loadChat();\n  } else {\n    runDebouncedForLoadFullChat(loadChat);\n  }\n});\n\naddActionHandler('loadTopChats', (): ActionReturnType => {\n  runThrottledForLoadTopChats(() => {\n    loadChats('active', undefined, true);\n    loadChats('archived', undefined, true);\n  });\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('requestSavedDialogUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat,\n    isSavedDialog: true,\n    limit: 1,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addMessages(global, result.messages);\n\n  if (result.messages.length) {\n    global = updateChatLastMessageId(global, chatId, result.messages[0].id, 'saved');\n    global = addChatListIds(global, 'saved', [chatId]);\n\n    setGlobal(global);\n  } else {\n    global = removeChatFromChatLists(global, chatId, 'saved');\n\n    setGlobal(global);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      const currentMessageList = selectCurrentMessageList(global, tabId);\n      if (!currentMessageList) return;\n      const { chatId: tabChatId, threadId } = currentMessageList;\n\n      if (selectIsChatWithSelf(global, tabChatId) && threadId === chatId) {\n        actions.openChat({ id: undefined, tabId });\n      }\n    });\n  }\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted, muteUntil });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted, muteUntil,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n  let missingInvitedUsers: ApiMissingInvitedUser[] | undefined;\n  try {\n    const result = await callApi('createChannel', { title, about, users });\n    createdChannel = result?.channel;\n    missingInvitedUsers = result?.missingUsers;\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (missingInvitedUsers) {\n    global = getGlobal();\n    global = updateMissingInvitedUsers(global, channelId, missingInvitedUsers, tabId);\n    setGlobal(global);\n  }\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, userId, shouldRevokeHistory, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user, shouldRevokeHistory });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    await callApi('leaveChannel', { channelId, accessHash });\n    global = getGlobal();\n    const chatMessages = selectChatMessages(global, chatId);\n    const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n    global = deleteChatMessages(global, chatId, localMessageIds);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const { chat: createdChat, missingUsers } = await callApi('createGroupChat', {\n      title,\n      users,\n    }) ?? {};\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n\n    if (missingUsers) {\n      global = getGlobal();\n      global = updateMissingInvitedUsers(global, chatId, missingUsers, tabId);\n      setGlobal(global);\n    }\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (err) {\n    if ((err as ApiError).message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('toggleSavedDialogPinned', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'savedDialogsPinned');\n\n  const isPinned = selectIsChatPinned(global, id, SAVED_FOLDER_ID);\n\n  const ids = global.chats.orderedPinnedIds.saved;\n  if ((ids?.length || 0) >= limit && !isPinned) {\n    actions.openLimitReachedModal({\n      limit: 'savedDialogsPinned',\n      tabId,\n    });\n    return;\n  }\n  void callApi('toggleSavedDialogPinned', { chat, shouldBePinned: !isPinned });\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  const newId = maxId + 1;\n  const folderUpdate = {\n    id: newId,\n    ...newFolder,\n  };\n  await callApi('editChatFolder', {\n    id: newId,\n    folderUpdate,\n  });\n\n  // Update called from the above `callApi` is throttled, but we need to apply changes immediately\n  actions.apiUpdate({\n    '@type': 'updateChatFolder',\n    id: newId,\n    folder: folderUpdate,\n  });\n\n  actions.requestNextSettingsScreen({\n    foldersAction: {\n      type: 'setFolderId',\n      payload: maxId + 1,\n    },\n    tabId,\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const topic = selectTopic(global, chatId, topicId);\n\n  const lastTopicMessageId = topic?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('checkChatInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  if (result.chat) {\n    global = addChats(global, buildCollectionByKey([result.chat], 'id'));\n    setGlobal(global);\n    actions.openChat({ id: result.chat.id, tabId });\n    return;\n  }\n\n  if (result.invite.subscriptionFormId) {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice: {\n          type: 'chatInviteSubscription',\n          hash,\n        },\n        subscriptionInfo: result.invite,\n        status: 'pending',\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    chatInviteModal: {\n      hash,\n      inviteInfo: result.invite,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, text, tabId = getCurrentTabId(),\n  } = payload;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  if (text) {\n    actions.openChatWithDraft({ chatId: chat.id, text: { text }, tabId });\n  } else {\n    actions.openChat({ id: chat.id, tabId });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', async (global, actions, payload): Promise<void> => {\n  const {\n    url,\n    shouldIgnoreCache,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    checkChatInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    openInvoice,\n    checkChatlistInvite,\n    openChatByUsername: openChatByUsernameAction,\n    openStoryViewerByUsername,\n    checkGiftCode,\n  } = actions;\n\n  if (isDeepLink(url)) {\n    const isProcessed = processDeepLink(url);\n    if (isProcessed || url.match(RE_TG_LINK)) {\n      return;\n    }\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n\n  const adaptedPathname = uri.pathname.replace(/^\\/?s\\//, '');\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${adaptedPathname}` : adaptedPathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const storyId = part2 === 's' && (Number(part3) || undefined);\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach: params.startattach,\n      attach: params.attach,\n      text: params.text,\n      tabId,\n    });\n    return;\n  }\n\n  if (storyId) {\n    openStoryViewerByUsername({\n      username: part1,\n      storyId,\n      tabId,\n    });\n\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    checkChatInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      shouldIgnoreCache,\n      tabId,\n    });\n    return;\n  }\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n    return;\n  }\n\n  if (part1 === 'addlist') {\n    const slug = part2;\n    checkChatlistInvite({ slug, tabId });\n    return;\n  }\n\n  if (part1 === 'giftcode') {\n    const slug = part2;\n    checkGiftCode({ slug, tabId });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  const isWebApp = await checkWebAppExists(global, part1, part2);\n\n  const shouldTryOpenChat = (part1 && !part2) || Number.isInteger(Number(part2)) || isWebApp;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      type: 'slug',\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      type: 'slug',\n      slug: part2,\n      tabId,\n    });\n  } else if (shouldTryOpenChat) {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach: params.startattach,\n      attach: params.attach,\n      startApp: params.startapp,\n      mode: params.mode,\n      originalParts: [part1, part2, part3],\n      tabId,\n    });\n  } else {\n    actions.openUrl({\n      url, shouldSkipModal: true, tabId, ignoreDeepLinks: true,\n    });\n  }\n});\n\naddActionHandler('processBoostParameters', async (global, actions, payload): Promise<void> => {\n  const { usernameOrId, isPrivate, tabId = getCurrentTabId() } = payload;\n\n  let chat: ApiChat | undefined;\n\n  if (isPrivate) {\n    chat = selectChat(global, usernameOrId);\n    if (!chat) {\n      actions.showNotification({ message: { key: 'PrivateChannelInaccessible' }, tabId });\n      return;\n    }\n  } else {\n    chat = await fetchChatByUsername(global, usernameOrId);\n    if (!chat) {\n      actions.showNotification({ message: { key: 'NoUsernameFound' }, tabId });\n      return;\n    }\n  }\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    actions.openChat({ id: chat.id, tabId });\n    return;\n  }\n\n  actions.openBoostModal({\n    chatId: chat.id,\n    tabId,\n  });\n});\n\naddActionHandler('acceptChatInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId, originalParts, startApp, mode,\n    text, onChatChanged, choose, ref, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  const webAppName = originalParts?.[1];\n  const isWebApp = webAppName && !Number(webAppName) && !originalParts?.[2];\n\n  if (!commentId) {\n    if (startAttach === undefined && messageId && !startParam && !ref\n      && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, timestamp, tabId,\n      });\n      return;\n    }\n\n    if (startAttach !== undefined && choose) {\n      actions.processAttachBotParameters({\n        username,\n        filter: choose,\n        startParam: startAttach || startApp,\n        tabId,\n      });\n      return;\n    }\n\n    if (startApp !== undefined && !webAppName) {\n      const theme = extractCurrentThemeParams();\n      const chatByUsername = await fetchChatByUsername(global, username);\n      global = getGlobal();\n      const user = chatByUsername && selectUser(global, chatByUsername.id);\n      if (!chatByUsername || !chat || !user?.hasMainMiniApp) return;\n      actions.requestMainWebView({\n        botId: chatByUsername.id,\n        peerId: chat.id,\n        theme,\n        startParam: startApp,\n        mode,\n        tabId,\n      });\n      return;\n    }\n    if (!isWebApp) {\n      await openChatByUsername(\n        global, actions, {\n          username,\n          threadId,\n          channelPostId: messageId,\n          startParam,\n          ref,\n          startAttach,\n          attach,\n          text,\n          timestamp,\n        }, tabId,\n      );\n      if (onChatChanged) {\n        // @ts-ignore\n        actions[onChatChanged.action](onChatChanged.payload);\n      }\n      return;\n    }\n  }\n\n  const usernameChat = selectChatByUsername(global, username);\n  if (commentId && messageId && usernameChat) {\n    actions.openThread({\n      isComments: true,\n      originChannelId: usernameChat.id,\n      originMessageId: messageId,\n      tabId,\n      focusMessageId: commentId,\n    });\n    if (timestamp) {\n      actions.openMediaFromTimestamp({\n        chatId: usernameChat.id,\n        messageId: commentId,\n        timestamp,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (!isWebApp) actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  if (isWebApp && chatByUsername) {\n    const theme = extractCurrentThemeParams();\n\n    actions.requestAppWebView({\n      appName: webAppName,\n      botId: chatByUsername.id,\n      tabId,\n      startApp,\n      mode,\n      theme,\n    });\n    return;\n  }\n\n  if (!messageId) return;\n\n  actions.openThread({\n    isComments: true,\n    originChannelId: chatByUsername.id,\n    originMessageId: messageId,\n    tabId,\n    focusMessageId: commentId,\n  });\n\n  if (timestamp) {\n    actions.openMediaFromTimestamp({\n      chatId: chatByUsername.id,\n      messageId: commentId || messageId!,\n      timestamp,\n      tabId,\n    });\n  }\n\n  if (onChatChanged) {\n    // @ts-ignore\n    actions[onChatChanged.action](onChatChanged.payload);\n  }\n});\n\naddActionHandler('openPrivateChannel', (global, actions, payload): ActionReturnType => {\n  const {\n    id, commentId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    actions.showNotification({\n      message: {\n        key: 'PrivateChannelInaccessible',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  if (!commentId && !messageId && !threadId) {\n    actions.openChat({ id, tabId });\n    return;\n  }\n\n  if (timestamp) {\n    actions.openMediaFromTimestamp({\n      chatId: id,\n      messageId: commentId || messageId!,\n      timestamp,\n      tabId,\n    });\n  }\n\n  if (commentId && messageId) {\n    actions.openThread({\n      isComments: true,\n      originChannelId: id,\n      originMessageId: messageId,\n      tabId,\n      focusMessageId: commentId,\n    });\n    return;\n  }\n\n  openChatWithParams(global, actions, chat, {\n    messageId,\n    threadId,\n    timestamp,\n  }, tabId);\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: isEnabled });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const updatedFullInfo = selectChatFullInfo(global, chat.id);\n  if (!updatedFullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = updatedFullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChatFullInfo(global, chat.id, {\n    ...(members && isBanned && {\n      members: members.filter((m) => m.userId !== userId),\n    }),\n    ...(members && !isBanned && {\n      members: members.map((m) => (\n        m.userId === userId\n          ? { ...m, bannedRights }\n          : m\n      )),\n    }),\n    ...(isUnblocked && kickedMembers && {\n      kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n    }),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  if (newAdminMembersById) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { adminMembersById: newAdminMembersById });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    fullInfo?.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (photo) {\n    actions.loadFullChat({ chatId, withPhotos: true });\n  }\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  actions.loadFullChat({ chatId, withPhotos: true });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  let isDeleted;\n  if (photo.id === chat.avatarPhotoId) {\n    isDeleted = await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n    });\n  } else {\n    isDeleted = await callApi('deleteProfilePhotos', [photo]);\n  }\n  if (!isDeleted) return;\n\n  global = getGlobal();\n  global = deletePeerPhoto(global, chatId, photo.id);\n  setGlobal(global);\n\n  actions.loadFullChat({ chatId, withPhotos: true });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, areProfilesEnabled, areSignaturesEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, areProfilesEnabled, areSignaturesEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let fullInfo = selectChatFullInfo(global, chat.id);\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: false });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const fullInfo = selectChatFullInfo(global, channelId);\n  let chat: ApiChat | undefined;\n  if (fullInfo?.linkedChatId) {\n    chat = selectChat(global, fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = selectChatFullInfo(global, chat.id)?.members?.length;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', { chat, offset });\n  if (!result) {\n    return;\n  }\n\n  const { members, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = memberIds.map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  const missingUsers = await callApi('addChatMembers', chat, users);\n  if (missingUsers) {\n    global = getGlobal();\n    global = updateMissingInvitedUsers(global, chatId, missingUsers, tabId);\n    setGlobal(global);\n  }\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, enabledReactions, reactionsLimit,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n    reactionsLimit,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat);\n});\n\naddActionHandler('fetchChat', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    return;\n  }\n\n  if (selectIsChatWithSelf(global, chatId)) {\n    void callApi('fetchChat', { type: 'self' });\n  } else {\n    const user = selectUser(global, chatId);\n    if (user) {\n      void callApi('fetchChat', { type: 'user', user });\n    }\n  }\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n\n  const { settings } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  actions.toggleStoryRibbon({ isShown: false, tabId });\n  actions.toggleStoryRibbon({ isShown: false, isArchived: true, tabId });\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  const isForChat = Boolean(filter);\n\n  if (!isForChat) {\n    actions.callAttachBot({\n      isFromSideMenu: true,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const topicsInfo = selectTopicsInfo(global, chatId);\n\n  if (!force && topicsInfo?.listedTopicIds && topicsInfo.listedTopicIds.length === topicsInfo.totalCount) {\n    return;\n  }\n\n  const offsetTopic = !force ? topicsInfo?.listedTopicIds?.reduce((acc, el) => {\n    const topic = selectTopic(global, chatId, el);\n    const accTopic = selectTopic(global, chatId, acc);\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && selectTopic(global, chatId, offsetTopic)) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  let result: true | undefined;\n  try {\n    result = await callApi('toggleForum', { chat, isEnabled });\n  } catch (error) {\n    if ((error as ApiError).message === 'FLOOD') {\n      actions.showNotification({ message: langProvider.oldTranslate('FloodWait'), tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (result) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, { isForum: isEnabled });\n    setGlobal(global);\n\n    if (!isEnabled) {\n      actions.closeForumPanel({ tabId });\n    } else {\n      actions.openForumPanel({ chatId: chat.id, tabId });\n    }\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = selectChatFullInfo(global, chat.id)?.areParticipantsHidden;\n  global = updateChatFullInfo(global, chatId, { areParticipantsHidden: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chatId, { areParticipantsHidden: prevIsEnabled });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openThread({\n      chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('deleteTopic', { chat, topicId });\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = selectTopic(global, chatId, topicId);\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  const topics = selectTopics(global, chatId);\n  if (!chat || !topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\naddActionHandler('checkChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatlistInvite', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_group_invite_bad_link'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    chatlistModal: {\n      invite: result.invite,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('joinChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { invite, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const peers = peerIds.map((peerId) => selectChat(global, peerId)).filter(Boolean);\n  const currentNotJoinedCount = peers.filter((peer) => peer.isNotJoined).length;\n\n  const existingFolder = 'folderId' in invite ? selectChatFolder(global, invite.folderId) : undefined;\n  const folderTitle = ('title' in invite ? invite.title : existingFolder?.title)!;\n\n  try {\n    const result = await callApi('joinChatlistInvite', { slug: invite.slug, peers });\n    if (!result) return;\n\n    if (existingFolder) {\n      actions.showNotification({\n        title: {\n          key: 'FolderLinkNotificationUpdatedTitle',\n          variables: {\n            title: folderTitle.text,\n          },\n        },\n        message: {\n          key: 'FolderLinkNotificationUpdatedSubtitle',\n          variables: {\n            count: currentNotJoinedCount,\n          },\n          options: {\n            pluralValue: currentNotJoinedCount,\n          },\n        },\n        tabId,\n      });\n\n      return;\n    }\n\n    actions.showNotification({\n      title: {\n        key: 'FolderLinkNotificationAddedTitle',\n        variables: {\n          title: folderTitle.text,\n        },\n      },\n      message: {\n        key: 'FolderLinkNotificationAddedSubtitle',\n        variables: {\n          count: currentNotJoinedCount,\n        },\n        options: {\n          pluralValue: currentNotJoinedCount,\n        },\n      },\n      tabId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHATLISTS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'chatlistJoined', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('leaveChatlist', async (global, actions, payload): Promise<void> => {\n  const { folderId, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n\n  const peers = peerIds?.map((peerId) => selectChat(global, peerId)).filter(Boolean) || [];\n\n  const result = await callApi('leaveChatlist', { folderId, peers });\n\n  if (!result) return;\n  if (!folder) return;\n\n  actions.showNotification({\n    title: {\n      key: 'FolderLinkNotificationDeletedTitle',\n      variables: {\n        title: folder.title.text,\n      },\n    },\n    message: {\n      key: 'FolderLinkNotificationDeletedSubtitle',\n      variables: {\n        count: peers.length,\n      },\n      options: {\n        pluralValue: peers.length,\n      },\n    },\n    tabId,\n  });\n});\n\naddActionHandler('loadChatlistInvites', async (global, actions, payload): Promise<void> => {\n  const { folderId } = payload;\n\n  const result = await callApi('fetchChatlistInvites', { folderId });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: result.invites,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('createChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let result: { filter: ApiChatFolder; invite: ApiChatlistExportedInvite | undefined } | undefined;\n\n  try {\n    result = await callApi('createChalistInvite', {\n      folderId,\n      peers: folder.includedChatIds.concat(folder.pinnedChatIds || [])\n        .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean),\n    });\n  } catch (error) {\n    if (CHATLIST_LIMIT_ERROR_LIST.has((error as ApiError).message)) {\n      actions.openLimitReachedModal({ limit: 'chatlistInvites', tabId });\n      actions.requestNextSettingsScreen({ screen: SettingsScreens.Folders, tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!result || !result.invite) return;\n\n  const { shareFolderScreen } = selectTabState(global, tabId);\n\n  if (!shareFolderScreen) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      byId: {\n        ...global.chatFolders.byId,\n        [folderId]: {\n          ...global.chatFolders.byId[folderId],\n          ...result.filter,\n        },\n      },\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: [\n          ...(global.chatFolders.invites[folderId] || []),\n          result.invite,\n        ],\n      },\n    },\n  };\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...shareFolderScreen,\n      url: result.invite.url,\n      isLoading: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    folderId, peerIds, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const slug = url.split('/').pop();\n  if (!slug) return;\n\n  const peers = peerIds\n    .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean);\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const result = await callApi('editChatlistInvite', { folderId, slug, peers });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        invites: {\n          ...global.chatFolders.invites,\n          [folderId]: global.chatFolders.invites[folderId]?.map((invite) => {\n            if (invite.url === url) {\n              return result;\n            }\n            return invite;\n          }),\n        },\n      },\n    };\n    setGlobal(global);\n  } catch (error) {\n    actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n  } finally {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      shareFolderScreen: {\n        ...selectTabState(global, tabId).shareFolderScreen!,\n        isLoading: false,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, url } = payload;\n\n  const slug = url.split('/').pop();\n\n  if (!slug) return;\n\n  const result = await callApi('deleteChatlistInvite', { folderId, slug });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: global.chatFolders.invites[folderId]?.filter((invite) => invite.url !== url),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openDeleteChatFolderModal', async (global, actions, payload): Promise<void> => {\n  const { folderId, isConfirmedForChatlist, tabId = getCurrentTabId() } = payload;\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  if (folder.isChatList && (!folder.hasMyInvites || isConfirmedForChatlist)) {\n    const currentIds = getOrderedIds(folderId);\n    const suggestions = await callApi('fetchLeaveChatlistSuggestions', { folderId });\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatlistModal: {\n        removal: {\n          folderId,\n          suggestedPeerIds: unique([...(suggestions || []), ...(currentIds || [])]),\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateChatDetectedLanguage', (global, actions, payload): ActionReturnType => {\n  const { chatId, detectedLanguage } = payload;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    detectedLanguage,\n  }, undefined, true);\n\n  return global;\n});\n\naddActionHandler('togglePeerTranslations', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('togglePeerTranslations', { chat, isEnabled });\n\n  if (result === undefined) return;\n\n  global = getGlobal();\n  global = updatePeerFullInfo(global, chatId, {\n    isTranslationDisabled: isEnabled ? undefined : true,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('setViewForumAsMessages', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat?.isForum || chat.isForumAsMessages === isEnabled) {\n    return;\n  }\n\n  global = updateChat(global, chatId, { isForumAsMessages: isEnabled || undefined });\n  setGlobal(global);\n\n  void callApi('setViewForumAsMessages', { chat, isEnabled });\n});\n\naddActionHandler('loadChannelRecommendations', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  if (chatId && !chat) {\n    return;\n  }\n\n  if (!chatId) {\n    const similarChannelIds = selectSimilarChannelIds(global, GLOBAL_SUGGESTED_CHANNELS_ID);\n    if (similarChannelIds) return; // Already cached\n  }\n\n  const result = await callApi('fetchChannelRecommendations', {\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { similarChannels, count } = result;\n\n  const chatsById = buildCollectionByKey(similarChannels, 'id');\n\n  global = getGlobal();\n  global = replaceSimilarChannels(global, chatId || GLOBAL_SUGGESTED_CHANNELS_ID, Object.keys(chatsById), count);\n  setGlobal(global);\n});\n\naddActionHandler('loadBotRecommendations', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectChat(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchBotsRecommendations', {\n    user,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { similarBots, count } = result;\n\n  const users = buildCollectionByKey(similarBots, 'id');\n\n  global = getGlobal();\n  global = addUsers(global, users);\n  global = addSimilarBots(global, userId, Object.keys(users), count);\n  setGlobal(global);\n});\n\naddActionHandler('toggleChannelRecommendations', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  global = toggleSimilarChannels(global, chatId);\n  setGlobal(global);\n});\n\naddActionHandler('resolveBusinessChatLink', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('resolveBusinessChatLink', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('BusinessLink.ErrorExpired'),\n      tabId,\n    });\n    return;\n  }\n\n  const { chatLink } = result;\n\n  actions.openChatWithDraft({\n    chatId: chatLink.chatId,\n    text: chatLink.text,\n    tabId,\n  });\n});\n\naddActionHandler('requestCollectibleInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    type, collectible, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  let inputCollectible;\n  if (type === 'phone') {\n    inputCollectible = { phone: collectible };\n  }\n  if (type === 'username') {\n    inputCollectible = { username: collectible };\n  }\n  if (!inputCollectible) return;\n\n  const result = await callApi('fetchCollectionInfo', inputCollectible);\n  if (!result) {\n    copyTextToClipboard(collectible);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    collectibleInfoModal: {\n      ...result,\n      type,\n      collectible,\n      peerId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function loadChats(\n  listType: ChatListType,\n  isFullDraftSync?: boolean,\n  shouldIgnorePagination?: boolean,\n) {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal();\n  let lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n\n  const params = !shouldIgnorePagination ? selectChatListLoadingParameters(global, listType) : {};\n  const offsetPeer = params.nextOffsetPeerId ? selectPeer(global, params.nextOffsetPeerId) : undefined;\n  const offsetDate = params.nextOffsetDate;\n  const offsetId = params.nextOffsetId;\n\n  const isFirstBatch = !shouldIgnorePagination && !offsetPeer && !offsetDate && !offsetId;\n\n  const result = listType === 'saved' ? await callApi('fetchSavedChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    offsetId,\n    offsetPeer,\n    withPinned: isFirstBatch,\n  }) : await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    offsetId,\n    offsetPeer,\n    archived: listType === 'archived',\n    withPinned: isFirstBatch,\n    lastLocalServiceMessageId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  global = getGlobal();\n  lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n\n  const newChats = buildCollectionByKey(result.chats, 'id');\n\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, newChats);\n  if (isFirstBatch) {\n    global = replaceChatListIds(global, listType, chatIds);\n    global = replaceUserStatuses(global, result.userStatusesById);\n  } else {\n    global = addChatListIds(global, listType, chatIds);\n    global = addUserStatuses(global, result.userStatusesById);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n  global = replaceMessages(global, result.messages);\n  global = updateChatsLastMessageId(global, result.lastMessageByChatId, listType);\n\n  if (!shouldIgnorePagination) {\n    global = replaceChatListLoadingParameters(\n      global, listType, result.nextOffsetId, result.nextOffsetPeerId, result.nextOffsetDate,\n    );\n  }\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    const draft = result.draftsById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!draft && !thread) return;\n\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', draft,\n      );\n    }\n  });\n\n  if ((chatIds.length === 0 || chatIds.length === result.totalChatCount) && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    chats, userStatusesById, fullInfo, groupCall, membersCount, isForumAsMessages,\n  } = result;\n\n  global = getGlobal();\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState', 'isLoaded']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  if (membersCount !== undefined) {\n    global = updateChat(global, chat.id, { membersCount });\n  }\n  if (chat.isForum) {\n    global = updateChat(global, chat.id, { isForumAsMessages });\n  }\n  global = replaceChatFullInfo(global, chat.id, fullInfo);\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  const localSet = stickerSet && selectStickerSet(global, stickerSet);\n  if (stickerSet && !localSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n    });\n  }\n\n  const emojiSet = fullInfo.emojiSet;\n  const localEmojiSet = emojiSet && selectStickerSet(global, emojiSet);\n  if (emojiSet && !localEmojiSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: emojiSet.id,\n        accessHash: emojiSet.accessHash,\n      },\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n  referrer?: string,\n) {\n  global = getGlobal();\n  const localChat = !referrer ? selectChatByUsername(global, username) : undefined;\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username, referrer) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function checkWebAppExists<T extends GlobalState>(\n  global: T, botName: string, appName: string,\n) {\n  if (!botName || !appName) return false;\n  global = getGlobal();\n  const chatByUsername = await fetchChatByUsername(global, botName);\n  global = getGlobal();\n  const bot = chatByUsername && selectUser(global, chatByUsername.id);\n  const botApp = bot && await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  return Boolean(botApp);\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n  setGlobal(global);\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  params: {\n    username: string;\n    threadId?: ThreadId;\n    channelPostId?: number;\n    startParam?: string;\n    ref?: string;\n    startAttach?: string;\n    attach?: string;\n    text?: string;\n    timestamp?: number;\n  },\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    username, threadId, channelPostId, startParam, ref, startAttach, attach, text, timestamp,\n  } = params;\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach !== undefined && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat?.id || bot.id,\n      startParam: startAttach,\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const starRefStartPrefixes = global.appConfig?.starRefStartPrefixes;\n  let referrer = ref;\n  if (startParam && starRefStartPrefixes?.length) {\n    const prefix = starRefStartPrefixes.find((p) => startParam.startsWith(p));\n    if (prefix) {\n      referrer = startParam.slice(prefix.length);\n    }\n  }\n\n  const chat = await fetchChatByUsername(global, username, referrer);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  openChatWithParams(global, actions, chat, {\n    isCurrentChat,\n    threadId,\n    messageId: channelPostId,\n    startParam,\n    referrer,\n    startAttach,\n    attach,\n    text,\n    timestamp,\n  }, tabId);\n}\n\nasync function openChatWithParams<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chat: ApiChat,\n  params: {\n    isCurrentChat?: boolean;\n    threadId?: ThreadId;\n    messageId?: number;\n    startParam?: string;\n    referrer?: string;\n    startAttach?: string;\n    attach?: string;\n    text?: string;\n    timestamp?: number;\n  },\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    isCurrentChat, threadId, messageId, startParam, referrer, startAttach, attach, text, timestamp,\n  } = params;\n\n  if (messageId) {\n    let isTopicProcessed = false;\n    // In forums, link to a topic start message should open the topic\n    if (chat.isForum && !threadId) {\n      let topic = selectTopics(global, chat.id)?.[messageId];\n      if (!topic) {\n        const topicResult = await callApi('fetchTopicById', { chat, topicId: messageId });\n        topic = topicResult?.topic;\n      }\n\n      if (topic) {\n        actions.openThread({\n          chatId: chat.id, threadId: topic.id, tabId,\n        });\n        isTopicProcessed = true;\n      }\n    }\n\n    if (!isTopicProcessed) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, timestamp, tabId,\n      });\n    }\n  } else if (!isCurrentChat) {\n    actions.openThread({ chatId: chat.id, threadId: threadId ?? MAIN_THREAD_ID, tabId });\n  }\n\n  if (startParam && !referrer) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n\n  if (text) {\n    actions.openChatWithDraft({ chatId: chat.id, text: { text }, tabId });\n  }\n\n  if (messageId && timestamp) {\n    actions.openMediaFromTimestamp({\n      chatId: chat.id, threadId, messageId, timestamp, tabId,\n    });\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.loadFullChat({ chatId: newChat.id });\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { ApiGroupCall } from '../../../api/types';\nimport type { CallSound } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectChatFullInfo, selectTabState, selectUser,\n} from '../../selectors';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nfunction requestGroupCallParticipants(\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  return callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await requestGroupCallParticipants(groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: {\n      key: 'LinkCopied',\n    },\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.oldTranslate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: \"Sorry, your browser doesn't support group calls\",\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall && groupCall.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash) && chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (!chat) return;\n\n    await loadFullChat(global, actions, chat);\n    global = getGlobal();\n    groupCall = selectChatGroupCall(global, chatId);\n  } else if (!groupCall && id && accessHash) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void requestGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.oldTranslate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          stream.getTracks().forEach((track) => track.stop());\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.oldTranslate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      } else {\n        stream.getTracks().forEach((track) => track.stop());\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { ApiGroupCall } from '../../api/types';\nimport type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\n\nimport { omit } from '../../util/iteratees';\nimport { selectChat } from '../selectors';\nimport { selectGroupCall } from '../selectors/calls';\nimport { updateChatFullInfo } from './chats';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChatFullInfo(global, groupCall.chatId, {\n        groupCallId: undefined,\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["CHATLIST_LIMIT_ERROR_LIST","Set","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","abortChatRequests","chatId","threadId","callApi","abortChatRequestsForCurrentChat","global","newChatId","newThreadId","_len","arguments","length","_ref2","Array","_key","tabId","getCurrentTabId","currentMessageList","selectCurrentMessageList","currentChatId","currentThreadId","isChatOpened","isThreadOpened","Object","values","byTabId","reduce","_ref3","_ref4","accHasChatOpened","accHasThreadOpened","id","otherTabId","otherMessageList","isSameChat","undefined","async","loadChats","listType","isFullDraftSync","shouldIgnorePagination","getGlobal","lastLocalServiceMessageId","selectLastServiceNotification","params","selectChatListLoadingParameters","offsetPeer","nextOffsetPeerId","selectPeer","offsetDate","nextOffsetDate","offsetId","nextOffsetId","isFirstBatch","result","limit","CHAT_LIST_LOAD_SLICE","withPinned","archived","chatIds","newChats","buildCollectionByKey","chats","updateUsers","users","updateChats","replaceChatListIds","replaceUserStatuses","userStatusesById","addChatListIds","addUserStatuses","updateChatListSecondaryInfo","replaceMessages","messages","updateChatsLastMessageId","lastMessageByChatId","replaceChatListLoadingParameters","keys","draftsById","forEach","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","totalChatCount","isFullyLoaded","setGlobal","loadFullChat","actions","chat","fullInfo","groupCall","membersCount","isForumAsMessages","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","isForum","replaceChatFullInfo","stickerSet","localSet","selectStickerSet","loadStickers","stickerSetInfo","accessHash","emojiSet","localEmojiSet","fetchChatByUsername","username","referrer","localChat","selectChatByUsername","isMin","user","updateUser","getAttachBotOrNotify","_len3","_ref10","_key3","selectUser","isUserBot","bot","showNotification","message","langProvider","openChatWithParams","_len5","_ref12","_key5","isCurrentChat","messageId","startParam","startAttach","attach","text","timestamp","isTopicProcessed","topic","selectTopics","topicResult","topicId","openThread","focusMessage","startBot","botId","param","openAttachMenuFromLink","openChatWithDraft","openMediaFromTimestamp","_len6","_ref13","_key6","callAttachBot","ensureIsSuperGroup","_len7","_ref14","_key7","selectChat","isChatBasicGroup","newChat","_len2","_ref9","_key2","error","openLimitReachedModal","showDialog","data","hasErrorKey","migrateChat","openChat","addActionHandler","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatIds","map","_ref","filter","Boolean","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","includes","has","add","loadViewportMessages","payload","type","noForumTopicPanel","shouldReplaceHistory","shouldReplaceLast","processOpenChatOrThread","TMP_CHAT_ID","hasUnreadMark","toggleChatUnread","isChatOnlySummary","selectChatLastMessageId","requestChatUpdate","selectIsChatWithSelf","otherParams","currentUserId","isComments","focusMessageId","loadingChatId","loadingThreadId","originChannelId","originMessageId","originalChat","getIsSavedDialog","threadInfo","selectThreadInfo","listedIds","Number","updateTabState","loadingThread","selectTabState","loadingMessageId","openPreviousChat","currentGlobal","addMessages","updateThreadInfo","isCommentsInfo","fromChannelId","fromMessageId","pick","updateThread","firstMessageId","onError","onLoaded","chatFullInfo","linkedChatId","selectSupportChat","whenFirstBatchDone","isCallbackFired","DEBUG","console","connectionState","authState","force","withPhotos","loadChat","loadMoreProfilePhotos","peerId","shouldInvalidateCache","SERVICE_NOTIFICATIONS_USER_ID","lastLocalMessage","isSavedDialog","updateChatLastMessageId","removeChatFromChatLists","_ref5","tabChatId","muteUntil","isMuted","updateTopic","title","about","photo","memberIds","createdChannel","missingInvitedUsers","chatCreation","progress","ChatCreationProgress","InProgress","channel","missingUsers","Error","channelId","Complete","updateMissingInvitedUsers","userId","shouldRevokeHistory","leaveChat","chatMessages","selectChatMessages","localMessageIds","isLocalMessageId","deleteChatMessages","createdChat","err","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","selectIsChatPinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","orderedPinnedIds","isChatArchived","SAVED_FOLDER_ID","saved","chatFolders","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","concat","emoticon","orderedIds","byId","maxId","Math","max","recommendedId","description","newFolder","newId","apiUpdate","requestNextSettingsScreen","foldersAction","_ref6","folderIds","unreadCount","selectTopic","lastTopicMessageId","lastMessageId","lastReadInboxMessageId","hash","addUsers","addChats","invite","subscriptionFormId","starsPayment","inputInvoice","subscriptionInfo","status","chatInviteModal","inviteInfo","phoneNumber","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","url","shouldIgnoreCache","openChatByPhoneNumber","checkChatInvite","openStickerSet","joinVoiceChatByLink","openInvoice","checkChatlistInvite","openChatByUsername","openChatByUsernameAction","openStoryViewerByUsername","checkGiftCode","isDeepLink","processDeepLink","match","RE_TG_LINK","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","window","open","toString","hostParts","split","adaptedPathname","part1","part2","part3","part","decodeURI","fromEntries","searchParams","storyId","substr","startattach","shortName","formatShareText","slug","chatOrChannelPostId","commentId","comment","isWebApp","botName","appName","chatByUsername","botApp","checkWebAppExists","shouldTryOpenChat","isInteger","hasOwnProperty","inviteHash","voicechat","livestream","substring","start","startApp","startapp","mode","originalParts","openUrl","shouldSkipModal","ignoreDeepLinks","usernameOrId","isPrivate","key","isChatChannel","isChatSuperGroup","openBoostModal","onChatChanged","choose","ref","selectCurrentChat","webAppName","usernames","c","processAttachBotParameters","theme","extractCurrentThemeParams","hasMainMiniApp","requestMainWebView","_len4","_ref11","_key4","channelPostId","currentChat","starRefStartPrefixes","appConfig","prefix","p","slice","action","usernameChat","requestAppWebView","isEnabled","updateChatFullInfo","isPreHistoryHidden","bannedRights","updatedFullInfo","selectChatFullInfo","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","chatAfterUpdate","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","isDeleted","avatarPhotoId","deletePeerPhoto","areProfilesEnabled","areSignaturesEnabled","groups","addedById","group","forDiscussionIds","fullChat","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","Loading","Closed","isProtected","enabledReactions","reactionsLimit","settings","toggleStoryRibbon","isShown","isArchived","forumPanelChatId","isFromSideMenu","attachMenu","bots","requestedAttachBotInstall","onConfirm","requestAttachBotInChat","topicsInfo","selectTopicsInfo","listedTopicIds","totalCount","offsetTopic","acc","el","accTopic","offsetTopicId","date","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","updateTopics","count","topics","updateListedTopicIds","entries","_ref7","readInboxMessageIdByTopicId","_ref8","shouldCloseChatOnError","openForumPanel","closeForumPanel","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","chatlistModal","peerIds","peers","currentNotJoinedCount","peer","isNotJoined","existingFolder","folderTitle","variables","options","pluralValue","invites","shareFolderScreen","screen","SettingsScreens","Folders","pop","isConfirmedForChatlist","isChatList","hasMyInvites","currentIds","suggestions","removal","suggestedPeerIds","unique","deleteFolderDialogModal","detectedLanguage","updatePeerFullInfo","isTranslationDisabled","selectSimilarChannelIds","GLOBAL_SUGGESTED_CHANNELS_ID","similarChannels","chatsById","replaceSimilarChannels","similarBots","addSimilarBots","toggleSimilarChannels","chatLink","collectible","inputCollectible","phone","collectibleInfoModal","copyTextToClipboard","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","then","currentTime","requestNextMutation","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","requestGroupCallParticipants","nextOffset","isCallPanelVisible","subscribed","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","isVideo","state","participantId","adminId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","getTracks","track","stop","checkMicrophonePermission","catch","audio","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}